
TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b48  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004cf8  08004cf8  00014cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d70  08004d70  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004d78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000020c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a17b  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002257  00000000  00000000  0002a26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009b0  00000000  00000000  0002c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000074c  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000269bd  00000000  00000000  0002d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fb44  00000000  00000000  00053f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2d6c  00000000  00000000  00063ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002af0  00000000  00000000  00146834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00149324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ce0 	.word	0x08004ce0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08004ce0 	.word	0x08004ce0

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b7c:	f000 b970 	b.w	8000e60 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	9e08      	ldr	r6, [sp, #32]
 8000b9e:	460d      	mov	r5, r1
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	460f      	mov	r7, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14a      	bne.n	8000c3e <__udivmoddi4+0xa6>
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	4694      	mov	ip, r2
 8000bac:	d965      	bls.n	8000c7a <__udivmoddi4+0xe2>
 8000bae:	fab2 f382 	clz	r3, r2
 8000bb2:	b143      	cbz	r3, 8000bc6 <__udivmoddi4+0x2e>
 8000bb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb8:	f1c3 0220 	rsb	r2, r3, #32
 8000bbc:	409f      	lsls	r7, r3
 8000bbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc2:	4317      	orrs	r7, r2
 8000bc4:	409c      	lsls	r4, r3
 8000bc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bca:	fa1f f58c 	uxth.w	r5, ip
 8000bce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bd2:	0c22      	lsrs	r2, r4, #16
 8000bd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bdc:	fb01 f005 	mul.w	r0, r1, r5
 8000be0:	4290      	cmp	r0, r2
 8000be2:	d90a      	bls.n	8000bfa <__udivmoddi4+0x62>
 8000be4:	eb1c 0202 	adds.w	r2, ip, r2
 8000be8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bec:	f080 811c 	bcs.w	8000e28 <__udivmoddi4+0x290>
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	f240 8119 	bls.w	8000e28 <__udivmoddi4+0x290>
 8000bf6:	3902      	subs	r1, #2
 8000bf8:	4462      	add	r2, ip
 8000bfa:	1a12      	subs	r2, r2, r0
 8000bfc:	b2a4      	uxth	r4, r4
 8000bfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0a:	fb00 f505 	mul.w	r5, r0, r5
 8000c0e:	42a5      	cmp	r5, r4
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x90>
 8000c12:	eb1c 0404 	adds.w	r4, ip, r4
 8000c16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x294>
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x294>
 8000c24:	4464      	add	r4, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11e      	cbz	r6, 8000c3a <__udivmoddi4+0xa2>
 8000c32:	40dc      	lsrs	r4, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0xbc>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f000 80ed 	beq.w	8000e22 <__udivmoddi4+0x28a>
 8000c48:	2100      	movs	r1, #0
 8000c4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c54:	fab3 f183 	clz	r1, r3
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	d149      	bne.n	8000cf0 <__udivmoddi4+0x158>
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d302      	bcc.n	8000c66 <__udivmoddi4+0xce>
 8000c60:	4282      	cmp	r2, r0
 8000c62:	f200 80f8 	bhi.w	8000e56 <__udivmoddi4+0x2be>
 8000c66:	1a84      	subs	r4, r0, r2
 8000c68:	eb65 0203 	sbc.w	r2, r5, r3
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	2e00      	cmp	r6, #0
 8000c72:	d0e2      	beq.n	8000c3a <__udivmoddi4+0xa2>
 8000c74:	e9c6 4700 	strd	r4, r7, [r6]
 8000c78:	e7df      	b.n	8000c3a <__udivmoddi4+0xa2>
 8000c7a:	b902      	cbnz	r2, 8000c7e <__udivmoddi4+0xe6>
 8000c7c:	deff      	udf	#255	; 0xff
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8090 	bne.w	8000da8 <__udivmoddi4+0x210>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8e:	fa1f fe8c 	uxth.w	lr, ip
 8000c92:	2101      	movs	r1, #1
 8000c94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c98:	fb07 2015 	mls	r0, r7, r5, r2
 8000c9c:	0c22      	lsrs	r2, r4, #16
 8000c9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ca2:	fb0e f005 	mul.w	r0, lr, r5
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x124>
 8000caa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x122>
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	f200 80cb 	bhi.w	8000e50 <__udivmoddi4+0x2b8>
 8000cba:	4645      	mov	r5, r8
 8000cbc:	1a12      	subs	r2, r2, r0
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ccc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x14e>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x14c>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f200 80bb 	bhi.w	8000e5a <__udivmoddi4+0x2c2>
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	eba4 040e 	sub.w	r4, r4, lr
 8000cea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cee:	e79f      	b.n	8000c30 <__udivmoddi4+0x98>
 8000cf0:	f1c1 0720 	rsb	r7, r1, #32
 8000cf4:	408b      	lsls	r3, r1
 8000cf6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000d02:	fa20 f307 	lsr.w	r3, r0, r7
 8000d06:	40fd      	lsrs	r5, r7
 8000d08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d0c:	4323      	orrs	r3, r4
 8000d0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d12:	fa1f fe8c 	uxth.w	lr, ip
 8000d16:	fb09 5518 	mls	r5, r9, r8, r5
 8000d1a:	0c1c      	lsrs	r4, r3, #16
 8000d1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d20:	fb08 f50e 	mul.w	r5, r8, lr
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b0>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d38:	f080 8088 	bcs.w	8000e4c <__udivmoddi4+0x2b4>
 8000d3c:	42a5      	cmp	r5, r4
 8000d3e:	f240 8085 	bls.w	8000e4c <__udivmoddi4+0x2b4>
 8000d42:	f1a8 0802 	sub.w	r8, r8, #2
 8000d46:	4464      	add	r4, ip
 8000d48:	1b64      	subs	r4, r4, r5
 8000d4a:	b29d      	uxth	r5, r3
 8000d4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d50:	fb09 4413 	mls	r4, r9, r3, r4
 8000d54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x1da>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d68:	d26c      	bcs.n	8000e44 <__udivmoddi4+0x2ac>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	d96a      	bls.n	8000e44 <__udivmoddi4+0x2ac>
 8000d6e:	3b02      	subs	r3, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d76:	fba3 9502 	umull	r9, r5, r3, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	42ac      	cmp	r4, r5
 8000d80:	46c8      	mov	r8, r9
 8000d82:	46ae      	mov	lr, r5
 8000d84:	d356      	bcc.n	8000e34 <__udivmoddi4+0x29c>
 8000d86:	d053      	beq.n	8000e30 <__udivmoddi4+0x298>
 8000d88:	b156      	cbz	r6, 8000da0 <__udivmoddi4+0x208>
 8000d8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d92:	fa04 f707 	lsl.w	r7, r4, r7
 8000d96:	40ca      	lsrs	r2, r1
 8000d98:	40cc      	lsrs	r4, r1
 8000d9a:	4317      	orrs	r7, r2
 8000d9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000da0:	4618      	mov	r0, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	f1c3 0120 	rsb	r1, r3, #32
 8000dac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db0:	fa20 f201 	lsr.w	r2, r0, r1
 8000db4:	fa25 f101 	lsr.w	r1, r5, r1
 8000db8:	409d      	lsls	r5, r3
 8000dba:	432a      	orrs	r2, r5
 8000dbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dcc:	0c11      	lsrs	r1, r2, #16
 8000dce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd6:	428d      	cmp	r5, r1
 8000dd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x258>
 8000dde:	eb1c 0101 	adds.w	r1, ip, r1
 8000de2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000de6:	d22f      	bcs.n	8000e48 <__udivmoddi4+0x2b0>
 8000de8:	428d      	cmp	r5, r1
 8000dea:	d92d      	bls.n	8000e48 <__udivmoddi4+0x2b0>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1b49      	subs	r1, r1, r5
 8000df2:	b292      	uxth	r2, r2
 8000df4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df8:	fb07 1115 	mls	r1, r7, r5, r1
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	fb05 f10e 	mul.w	r1, r5, lr
 8000e04:	4291      	cmp	r1, r2
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x282>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e10:	d216      	bcs.n	8000e40 <__udivmoddi4+0x2a8>
 8000e12:	4291      	cmp	r1, r2
 8000e14:	d914      	bls.n	8000e40 <__udivmoddi4+0x2a8>
 8000e16:	3d02      	subs	r5, #2
 8000e18:	4462      	add	r2, ip
 8000e1a:	1a52      	subs	r2, r2, r1
 8000e1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e20:	e738      	b.n	8000c94 <__udivmoddi4+0xfc>
 8000e22:	4631      	mov	r1, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e708      	b.n	8000c3a <__udivmoddi4+0xa2>
 8000e28:	4639      	mov	r1, r7
 8000e2a:	e6e6      	b.n	8000bfa <__udivmoddi4+0x62>
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x90>
 8000e30:	4548      	cmp	r0, r9
 8000e32:	d2a9      	bcs.n	8000d88 <__udivmoddi4+0x1f0>
 8000e34:	ebb9 0802 	subs.w	r8, r9, r2
 8000e38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	e7a3      	b.n	8000d88 <__udivmoddi4+0x1f0>
 8000e40:	4645      	mov	r5, r8
 8000e42:	e7ea      	b.n	8000e1a <__udivmoddi4+0x282>
 8000e44:	462b      	mov	r3, r5
 8000e46:	e794      	b.n	8000d72 <__udivmoddi4+0x1da>
 8000e48:	4640      	mov	r0, r8
 8000e4a:	e7d1      	b.n	8000df0 <__udivmoddi4+0x258>
 8000e4c:	46d0      	mov	r8, sl
 8000e4e:	e77b      	b.n	8000d48 <__udivmoddi4+0x1b0>
 8000e50:	3d02      	subs	r5, #2
 8000e52:	4462      	add	r2, ip
 8000e54:	e732      	b.n	8000cbc <__udivmoddi4+0x124>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e70a      	b.n	8000c70 <__udivmoddi4+0xd8>
 8000e5a:	4464      	add	r4, ip
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	e742      	b.n	8000ce6 <__udivmoddi4+0x14e>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <API_FSM_init>:
  * @brief  Funcion que inicializa la Maquina de Estados Finitos con un estado definido
  * 		por default
  * @param  None
  * @retval None
  */
void API_FSM_init(void){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af04      	add	r7, sp, #16

	estadoMEF = BACKLIGHT_ON_C;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <API_FSM_init+0x70>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]

	p_delayLCD = &delayLCD;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <API_FSM_init+0x74>)
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <API_FSM_init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]

	delayInit( p_delayLCD , LCD_TIMER_OFF);
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <API_FSM_init+0x74>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f247 5130 	movw	r1, #30000	; 0x7530
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fb08 	bl	8001494 <delayInit>

	p_delayTemp = &delayTemp;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <API_FSM_init+0x7c>)
 8000e86:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <API_FSM_init+0x80>)
 8000e88:	601a      	str	r2, [r3, #0]

	delayInit( p_delayTemp, DHT_SAMPLE_PERIOD);
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <API_FSM_init+0x7c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fafe 	bl	8001494 <delayInit>

	debounceFSM_init();
 8000e98:	f000 fa44 	bl	8001324 <debounceFSM_init>

	//Se inicaliza el LCD
	if(lcdInit(&lcd, &hi2c1, LCD_I2C_ADDRESS, LCD_COLUMNS, LCD_ROWS, LCD_CHARACTER, LCD_BITMODE) != LCD_OK)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2314      	movs	r3, #20
 8000eaa:	2227      	movs	r2, #39	; 0x27
 8000eac:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <API_FSM_init+0x84>)
 8000eae:	480f      	ldr	r0, [pc, #60]	; (8000eec <API_FSM_init+0x88>)
 8000eb0:	f000 fbbc 	bl	800162c <lcdInit>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <API_FSM_init+0x5a>
		_API_FSM_Error_Handler();
 8000eba:	f000 fa2d 	bl	8001318 <_API_FSM_Error_Handler>

	_API_FSM_Process_Temperature_Init();
 8000ebe:	f000 f8a5 	bl	800100c <_API_FSM_Process_Temperature_Init>

	DHT_Read(&sensorTemp, C);
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <API_FSM_init+0x8c>)
 8000ec6:	f000 ff91 	bl	8001dec <DHT_Read>

	_API_FSM_UpdateLCD();
 8000eca:	f000 f8e9 	bl	80010a0 <_API_FSM_UpdateLCD>

}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2000009c 	.word	0x2000009c
 8000ed8:	200000ac 	.word	0x200000ac
 8000edc:	200000a0 	.word	0x200000a0
 8000ee0:	200000bc 	.word	0x200000bc
 8000ee4:	200000b0 	.word	0x200000b0
 8000ee8:	200000f4 	.word	0x200000f4
 8000eec:	20000148 	.word	0x20000148
 8000ef0:	200000d8 	.word	0x200000d8

08000ef4 <API_FSM_update>:
  * 		entrada (pulsador presionado) o en base al tiempo transcurrido desde el cambio de estado
  * 		de la entrada en las anteriores ejecuciones
  * @param  None
  * @retval None
  */
void API_FSM_update(void){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

	debounceFSM_update();
 8000ef8:	f000 fa2a 	bl	8001350 <debounceFSM_update>

	_API_FSM_Process_Temperature();
 8000efc:	f000 f8b4 	bl	8001068 <_API_FSM_Process_Temperature>

	switch(estadoMEF){
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <API_FSM_update+0xe4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d85b      	bhi.n	8000fc0 <API_FSM_update+0xcc>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <API_FSM_update+0x1c>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f5b 	.word	0x08000f5b
 8000f18:	08000f71 	.word	0x08000f71
 8000f1c:	08000fab 	.word	0x08000fab

	case BACKLIGHT_ON_C:
		if(readKey()){
 8000f20:	f000 fa86 	bl	8001430 <readKey>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d009      	beq.n	8000f3e <API_FSM_update+0x4a>
			DHT_ConvertUnit(&sensorTemp, F);
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	482b      	ldr	r0, [pc, #172]	; (8000fdc <API_FSM_update+0xe8>)
 8000f2e:	f000 ff8f 	bl	8001e50 <DHT_ConvertUnit>
			_API_FSM_UpdateLCD();
 8000f32:	f000 f8b5 	bl	80010a0 <_API_FSM_UpdateLCD>
			estadoMEF = BACKLIGHT_ON_F;
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <API_FSM_update+0xe4>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]
		}
		else if(delayRead(p_delayLCD)){
			 _API_FSM_turnOffBacklight();
			estadoMEF = BACKLIGHT_OFF_C;
		}
		break;
 8000f3c:	e043      	b.n	8000fc6 <API_FSM_update+0xd2>
		else if(delayRead(p_delayLCD)){
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <API_FSM_update+0xec>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fac0 	bl	80014c8 <delayRead>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d03b      	beq.n	8000fc6 <API_FSM_update+0xd2>
			 _API_FSM_turnOffBacklight();
 8000f4e:	f000 f849 	bl	8000fe4 <_API_FSM_turnOffBacklight>
			estadoMEF = BACKLIGHT_OFF_C;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <API_FSM_update+0xe4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
		break;
 8000f58:	e035      	b.n	8000fc6 <API_FSM_update+0xd2>

	case BACKLIGHT_OFF_C:
		if(readKey()){
 8000f5a:	f000 fa69 	bl	8001430 <readKey>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d032      	beq.n	8000fca <API_FSM_update+0xd6>
			_API_FSM_turnOnBacklight();
 8000f64:	f000 f848 	bl	8000ff8 <_API_FSM_turnOnBacklight>
			estadoMEF = BACKLIGHT_ON_C;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <API_FSM_update+0xe4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f6e:	e02c      	b.n	8000fca <API_FSM_update+0xd6>

	case BACKLIGHT_ON_F:
		if(readKey()){
 8000f70:	f000 fa5e 	bl	8001430 <readKey>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d009      	beq.n	8000f8e <API_FSM_update+0x9a>
			DHT_ConvertUnit(&sensorTemp, C);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4817      	ldr	r0, [pc, #92]	; (8000fdc <API_FSM_update+0xe8>)
 8000f7e:	f000 ff67 	bl	8001e50 <DHT_ConvertUnit>
			_API_FSM_UpdateLCD();
 8000f82:	f000 f88d 	bl	80010a0 <_API_FSM_UpdateLCD>
			estadoMEF = BACKLIGHT_ON_C;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <API_FSM_update+0xe4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
		}
		else if(delayRead(p_delayLCD)){
			 _API_FSM_turnOffBacklight();
			estadoMEF = BACKLIGHT_OFF_F;
		}
		break;
 8000f8c:	e01f      	b.n	8000fce <API_FSM_update+0xda>
		else if(delayRead(p_delayLCD)){
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <API_FSM_update+0xec>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fa98 	bl	80014c8 <delayRead>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d017      	beq.n	8000fce <API_FSM_update+0xda>
			 _API_FSM_turnOffBacklight();
 8000f9e:	f000 f821 	bl	8000fe4 <_API_FSM_turnOffBacklight>
			estadoMEF = BACKLIGHT_OFF_F;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <API_FSM_update+0xe4>)
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	701a      	strb	r2, [r3, #0]
		break;
 8000fa8:	e011      	b.n	8000fce <API_FSM_update+0xda>

	case BACKLIGHT_OFF_F:
		if(readKey()){
 8000faa:	f000 fa41 	bl	8001430 <readKey>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00e      	beq.n	8000fd2 <API_FSM_update+0xde>
			_API_FSM_turnOnBacklight();
 8000fb4:	f000 f820 	bl	8000ff8 <_API_FSM_turnOnBacklight>
			estadoMEF = BACKLIGHT_ON_F;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <API_FSM_update+0xe4>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fbe:	e008      	b.n	8000fd2 <API_FSM_update+0xde>
	 * estados anteriornes indica que la maquina de estado no se encuentra en
	 * un estado posible o válido por algun motivo por lo cual se llama a la
	 * funcion error
	 */
	default:
		_API_FSM_Error_Handler();
 8000fc0:	f000 f9aa 	bl	8001318 <_API_FSM_Error_Handler>
		break;
 8000fc4:	e006      	b.n	8000fd4 <API_FSM_update+0xe0>
		break;
 8000fc6:	bf00      	nop
 8000fc8:	e004      	b.n	8000fd4 <API_FSM_update+0xe0>
		break;
 8000fca:	bf00      	nop
 8000fcc:	e002      	b.n	8000fd4 <API_FSM_update+0xe0>
		break;
 8000fce:	bf00      	nop
 8000fd0:	e000      	b.n	8000fd4 <API_FSM_update+0xe0>
		break;
 8000fd2:	bf00      	nop
	}

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000009c 	.word	0x2000009c
 8000fdc:	200000d8 	.word	0x200000d8
 8000fe0:	200000ac 	.word	0x200000ac

08000fe4 <_API_FSM_turnOffBacklight>:
  * @brief  Funcion que ejecuta accion de apagar el backlight)
  * @param  None
  * @retval None
  */
static void _API_FSM_turnOffBacklight(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	lcdNoBacklight(&lcd);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <_API_FSM_turnOffBacklight+0x10>)
 8000fea:	f000 fc02 	bl	80017f2 <lcdNoBacklight>

	return;
 8000fee:	bf00      	nop
}
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000148 	.word	0x20000148

08000ff8 <_API_FSM_turnOnBacklight>:
  * @brief  Funcion que ejecuta accion de encender el backlight)
  * @param  None
  * @retval None
  */
static void _API_FSM_turnOnBacklight(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	lcdBacklight(&lcd);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <_API_FSM_turnOnBacklight+0x10>)
 8000ffe:	f000 fbe3 	bl	80017c8 <lcdBacklight>

	return;
 8001002:	bf00      	nop
}
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000148 	.word	0x20000148

0800100c <_API_FSM_Process_Temperature_Init>:

static void _API_FSM_Process_Temperature_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	//Aseguramos que esta el clock del bus encendido
	DHT_SENSOR_GPIO_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_API_FSM_Process_Temperature_Init+0x4c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <_API_FSM_Process_Temperature_Init+0x4c>)
 800101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <_API_FSM_Process_Temperature_Init+0x4c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

	//Inicializamos el sensor de temperatura
	if(DHT_Init(&sensorTemp, DHT_SENSOR_GPIO_PORT, DHT_SENSOR_GPIO_PIN, DHT_SENSOR_TYPE)!=DHT_OK)
 800102e:	2301      	movs	r3, #1
 8001030:	2204      	movs	r2, #4
 8001032:	490a      	ldr	r1, [pc, #40]	; (800105c <_API_FSM_Process_Temperature_Init+0x50>)
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <_API_FSM_Process_Temperature_Init+0x54>)
 8001036:	f000 feab 	bl	8001d90 <DHT_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <_API_FSM_Process_Temperature_Init+0x38>
		_API_FSM_Error_Handler();
 8001040:	f000 f96a 	bl	8001318 <_API_FSM_Error_Handler>

	//Inicializamos el delay para la toma de temperatura
	delayInit (&delayTemp, DHT_SAMPLE_PERIOD);
 8001044:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <_API_FSM_Process_Temperature_Init+0x58>)
 800104a:	f000 fa23 	bl	8001494 <delayInit>

	return;
 800104e:	bf00      	nop
}
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40021800 	.word	0x40021800
 8001060:	200000d8 	.word	0x200000d8
 8001064:	200000b0 	.word	0x200000b0

08001068 <_API_FSM_Process_Temperature>:

static void _API_FSM_Process_Temperature(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	if(delayRead (&delayTemp)){
 800106e:	480a      	ldr	r0, [pc, #40]	; (8001098 <_API_FSM_Process_Temperature+0x30>)
 8001070:	f000 fa2a 	bl	80014c8 <delayRead>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00a      	beq.n	8001090 <_API_FSM_Process_Temperature+0x28>
		tempUnit_t actualUnit = sensorTemp.temperatureUnit;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <_API_FSM_Process_Temperature+0x34>)
 800107c:	7c1b      	ldrb	r3, [r3, #16]
 800107e:	71fb      	strb	r3, [r7, #7]
		DHT_Read(&sensorTemp, actualUnit);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <_API_FSM_Process_Temperature+0x34>)
 8001086:	f000 feb1 	bl	8001dec <DHT_Read>
		_API_FSM_UpdateLCD();
 800108a:	f000 f809 	bl	80010a0 <_API_FSM_UpdateLCD>
	}

	return;
 800108e:	bf00      	nop
 8001090:	bf00      	nop

}
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200000b0 	.word	0x200000b0
 800109c:	200000d8 	.word	0x200000d8

080010a0 <_API_FSM_UpdateLCD>:
  * @brief  Funcion destinada a contenedor de manejo de errores
  * @param  None
  * @retval None
  */
static void _API_FSM_UpdateLCD(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
	float temp = sensorTemp.temperature;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <_API_FSM_UpdateLCD+0xb4>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	617b      	str	r3, [r7, #20]
	char temp_Value[5] = {0};
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	2300      	movs	r3, #0
 80010b2:	743b      	strb	r3, [r7, #16]
	char temp_Value2[5] = {0};
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	2300      	movs	r3, #0
 80010ba:	723b      	strb	r3, [r7, #8]

	lcdClear(&lcd);
 80010bc:	4826      	ldr	r0, [pc, #152]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 80010be:	f000 fb59 	bl	8001774 <lcdClear>
	lcdReturnHome(&lcd);
 80010c2:	4825      	ldr	r0, [pc, #148]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 80010c4:	f000 fb6b 	bl	800179e <lcdReturnHome>

	lcdPrintStr(&lcd,temp_Text, sizeof(temp_Text));
 80010c8:	2207      	movs	r2, #7
 80010ca:	4924      	ldr	r1, [pc, #144]	; (800115c <_API_FSM_UpdateLCD+0xbc>)
 80010cc:	4822      	ldr	r0, [pc, #136]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 80010ce:	f000 fbd7 	bl	8001880 <lcdPrintStr>

	ftoa(temp, temp_Value, 1);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2101      	movs	r1, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	ed97 0a05 	vldr	s0, [r7, #20]
 80010de:	f000 f8bf 	bl	8001260 <ftoa>

	lcdPrintStr(&lcd,(uint8_t*)temp_Value, sizeof(temp_Value));
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2205      	movs	r2, #5
 80010e8:	4619      	mov	r1, r3
 80010ea:	481b      	ldr	r0, [pc, #108]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 80010ec:	f000 fbc8 	bl	8001880 <lcdPrintStr>

	if(sensorTemp.temperatureUnit == C)
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <_API_FSM_UpdateLCD+0xb4>)
 80010f2:	7c1b      	ldrb	r3, [r3, #16]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <_API_FSM_UpdateLCD+0x64>
		lcdPrintStr(&lcd,CUnit_Text, sizeof(CUnit_Text));
 80010f8:	2203      	movs	r2, #3
 80010fa:	4919      	ldr	r1, [pc, #100]	; (8001160 <_API_FSM_UpdateLCD+0xc0>)
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 80010fe:	f000 fbbf 	bl	8001880 <lcdPrintStr>
 8001102:	e004      	b.n	800110e <_API_FSM_UpdateLCD+0x6e>
	else
		lcdPrintStr(&lcd,FUnit_Text, sizeof(FUnit_Text));
 8001104:	2203      	movs	r2, #3
 8001106:	4917      	ldr	r1, [pc, #92]	; (8001164 <_API_FSM_UpdateLCD+0xc4>)
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 800110a:	f000 fbb9 	bl	8001880 <lcdPrintStr>

	lcdSetCursorPosition(&lcd, 0, 2);
 800110e:	2202      	movs	r2, #2
 8001110:	2100      	movs	r1, #0
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 8001114:	f000 fb82 	bl	800181c <lcdSetCursorPosition>
	lcdPrintStr(&lcd,hum_Text, sizeof(hum_Text));
 8001118:	2206      	movs	r2, #6
 800111a:	4913      	ldr	r1, [pc, #76]	; (8001168 <_API_FSM_UpdateLCD+0xc8>)
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 800111e:	f000 fbaf 	bl	8001880 <lcdPrintStr>

	temp = sensorTemp.humidity;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <_API_FSM_UpdateLCD+0xb4>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	617b      	str	r3, [r7, #20]

	ftoa(temp, temp_Value2, 2);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2102      	movs	r1, #2
 800112c:	4618      	mov	r0, r3
 800112e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001132:	f000 f895 	bl	8001260 <ftoa>

	lcdPrintStr(&lcd,(uint8_t*)temp_Value2, sizeof(temp_Value2));
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2205      	movs	r2, #5
 800113a:	4619      	mov	r1, r3
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 800113e:	f000 fb9f 	bl	8001880 <lcdPrintStr>

	lcdPrintStr(&lcd,PorUnit_Text, sizeof(PorUnit_Text));
 8001142:	2203      	movs	r2, #3
 8001144:	4909      	ldr	r1, [pc, #36]	; (800116c <_API_FSM_UpdateLCD+0xcc>)
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <_API_FSM_UpdateLCD+0xb8>)
 8001148:	f000 fb9a 	bl	8001880 <lcdPrintStr>

	return;
 800114c:	bf00      	nop

}
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000d8 	.word	0x200000d8
 8001158:	20000148 	.word	0x20000148
 800115c:	08004cf8 	.word	0x08004cf8
 8001160:	08004d08 	.word	0x08004d08
 8001164:	08004d0c 	.word	0x08004d0c
 8001168:	08004d00 	.word	0x08004d00
 800116c:	08004d10 	.word	0x08004d10

08001170 <reverse>:
 *
 */

// Reverses a string 'str' of length 'len'
static void reverse(char* str, int len)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001184:	e018      	b.n	80011b8 <reverse+0x48>
        temp = str[i];
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	441a      	add	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	440b      	add	r3, r1
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	701a      	strb	r2, [r3, #0]
        i++;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
        j--;
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbe2      	blt.n	8001186 <reverse+0x16>
    }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
static int intToStr(int x, char str[], int d)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
    int i = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
    while (x) {
 80011e0:	e01d      	b.n	800121e <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <intToStr+0x8c>)
 80011e6:	fb83 1302 	smull	r1, r3, r3, r2
 80011ea:	1099      	asrs	r1, r3, #2
 80011ec:	17d3      	asrs	r3, r2, #31
 80011ee:	1ac9      	subs	r1, r1, r3
 80011f0:	460b      	mov	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	1ad1      	subs	r1, r2, r3
 80011fa:	b2ca      	uxtb	r2, r1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	6179      	str	r1, [r7, #20]
 8001202:	4619      	mov	r1, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	440b      	add	r3, r1
 8001208:	3230      	adds	r2, #48	; 0x30
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <intToStr+0x8c>)
 8001212:	fb82 1203 	smull	r1, r2, r2, r3
 8001216:	1092      	asrs	r2, r2, #2
 8001218:	17db      	asrs	r3, r3, #31
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1de      	bne.n	80011e2 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001224:	e007      	b.n	8001236 <intToStr+0x66>
        str[i++] = '0';
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	617a      	str	r2, [r7, #20]
 800122c:	461a      	mov	r2, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	4413      	add	r3, r2
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	429a      	cmp	r2, r3
 800123c:	dbf3      	blt.n	8001226 <intToStr+0x56>

    reverse(str, i);
 800123e:	6979      	ldr	r1, [r7, #20]
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f7ff ff95 	bl	8001170 <reverse>
    str[i] = '\0';
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
    return i;
 8001250:	697b      	ldr	r3, [r7, #20]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	66666667 	.word	0x66666667

08001260 <ftoa>:
static void ftoa(float n, char* res, int afterpoint)
{
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	ed87 0a03 	vstr	s0, [r7, #12]
 800126a:	60b8      	str	r0, [r7, #8]
 800126c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800126e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001276:	ee17 3a90 	vmov	r3, s15
 800127a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001286:	ed97 7a03 	vldr	s14, [r7, #12]
 800128a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	69f8      	ldr	r0, [r7, #28]
 8001298:	f7ff ff9a 	bl	80011d0 <intToStr>
 800129c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d030      	beq.n	8001306 <ftoa+0xa6>
        res[i] = '.'; // add dot
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	222e      	movs	r2, #46	; 0x2e
 80012ac:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80012ae:	69b8      	ldr	r0, [r7, #24]
 80012b0:	f7ff f902 	bl	80004b8 <__aeabi_f2d>
 80012b4:	4604      	mov	r4, r0
 80012b6:	460d      	mov	r5, r1
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff f8eb 	bl	8000494 <__aeabi_i2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	ec43 2b11 	vmov	d1, r2, r3
 80012c6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001310 <ftoa+0xb0>
 80012ca:	f002 fdcf 	bl	8003e6c <pow>
 80012ce:	ec53 2b10 	vmov	r2, r3, d0
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff f947 	bl	8000568 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fbf1 	bl	8000ac8 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80012ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	4413      	add	r3, r2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4619      	mov	r1, r3
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff ff65 	bl	80011d0 <intToStr>
    }
}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	bf00      	nop
 8001310:	00000000 	.word	0x00000000
 8001314:	40240000 	.word	0x40240000

08001318 <_API_FSM_Error_Handler>:
  * @brief  Funcion destinada a contenedor de manejo de errores
  * @param  None
  * @retval None
  */
static void _API_FSM_Error_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 800131c:	2001      	movs	r0, #1
 800131e:	f000 fed5 	bl	80020cc <BSP_LED_On>
	while (1)
 8001322:	e7fe      	b.n	8001322 <_API_FSM_Error_Handler+0xa>

08001324 <debounceFSM_init>:
  * @brief  Funcion que inicializa la Maquina de Estados Finitos con un estado definido
  * 		por default
  * @param  None
  * @retval None
  */
void debounceFSM_init(void){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

	estadoMEF = BUTTON_UP;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <debounceFSM_init+0x20>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]

	p_delayANTIBOUNCE = &delayANTIBOUNCE;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <debounceFSM_init+0x24>)
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <debounceFSM_init+0x28>)
 8001332:	601a      	str	r2, [r3, #0]

	delayInit( p_delayANTIBOUNCE , DELAY_BOUNCE);
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <debounceFSM_init+0x24>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2128      	movs	r1, #40	; 0x28
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f8aa 	bl	8001494 <delayInit>

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000c0 	.word	0x200000c0
 8001348:	200000d0 	.word	0x200000d0
 800134c:	200000c4 	.word	0x200000c4

08001350 <debounceFSM_update>:
  * 		entrada (pulsador presionado) o en base al tiempo transcurrido desde el cambio de estado
  * 		de la entrada en las anteriores ejecuciones
  * @param  None
  * @retval None
  */
void debounceFSM_update(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

	switch(estadoMEF){
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <debounceFSM_update+0xd8>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d859      	bhi.n	8001410 <debounceFSM_update+0xc0>
 800135c:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <debounceFSM_update+0x14>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	08001375 	.word	0x08001375
 8001368:	08001393 	.word	0x08001393
 800136c:	080013c3 	.word	0x080013c3
 8001370:	080013e1 	.word	0x080013e1

	case BUTTON_UP:
		if(BSP_PB_GetState(BUTTON_USER)){
 8001374:	2000      	movs	r0, #0
 8001376:	f000 ff19 	bl	80021ac <BSP_PB_GetState>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d04a      	beq.n	8001416 <debounceFSM_update+0xc6>
			delayRead (p_delayANTIBOUNCE);
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <debounceFSM_update+0xdc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f89f 	bl	80014c8 <delayRead>
			estadoMEF = BUTTON_FALLING;
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <debounceFSM_update+0xd8>)
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001390:	e041      	b.n	8001416 <debounceFSM_update+0xc6>

	case BUTTON_FALLING:
		if(delayRead(p_delayANTIBOUNCE)){
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <debounceFSM_update+0xdc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f896 	bl	80014c8 <delayRead>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03b      	beq.n	800141a <debounceFSM_update+0xca>
			if(BSP_PB_GetState(BUTTON_USER)){
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 ff02 	bl	80021ac <BSP_PB_GetState>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <debounceFSM_update+0x6a>
				estadoMEF = BUTTON_DOWN;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <debounceFSM_update+0xd8>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 80013b4:	f000 f854 	bl	8001460 <buttonPressed>
			}else
				estadoMEF = BUTTON_UP;
		}
		break;
 80013b8:	e02f      	b.n	800141a <debounceFSM_update+0xca>
				estadoMEF = BUTTON_UP;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <debounceFSM_update+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
		break;
 80013c0:	e02b      	b.n	800141a <debounceFSM_update+0xca>

	case BUTTON_DOWN:
		if(!BSP_PB_GetState(BUTTON_USER)){
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 fef2 	bl	80021ac <BSP_PB_GetState>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d127      	bne.n	800141e <debounceFSM_update+0xce>
			delayRead (p_delayANTIBOUNCE);
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <debounceFSM_update+0xdc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f878 	bl	80014c8 <delayRead>
			estadoMEF = BUTTON_RAISING;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <debounceFSM_update+0xd8>)
 80013da:	2203      	movs	r2, #3
 80013dc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013de:	e01e      	b.n	800141e <debounceFSM_update+0xce>

	case BUTTON_RAISING:
		if(delayRead (p_delayANTIBOUNCE)){
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <debounceFSM_update+0xdc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f86f 	bl	80014c8 <delayRead>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d018      	beq.n	8001422 <debounceFSM_update+0xd2>
			if(!BSP_PB_GetState(BUTTON_USER)){
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 fedb 	bl	80021ac <BSP_PB_GetState>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <debounceFSM_update+0xb8>
				estadoMEF = BUTTON_UP;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <debounceFSM_update+0xd8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8001402:	f000 f835 	bl	8001470 <buttonReleased>
			}else
				estadoMEF = BUTTON_DOWN;
		}
		break;
 8001406:	e00c      	b.n	8001422 <debounceFSM_update+0xd2>
				estadoMEF = BUTTON_DOWN;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <debounceFSM_update+0xd8>)
 800140a:	2202      	movs	r2, #2
 800140c:	701a      	strb	r2, [r3, #0]
		break;
 800140e:	e008      	b.n	8001422 <debounceFSM_update+0xd2>
	 * estados anteriornes indica que la maquina de estado no se encuentra en
	 * un estado posible o válido por algun motivo por lo cual se llama a la
	 * funcion error
	 */
	default:
		API_DEBOUNCE_Error_Handler();
 8001410:	f000 f83a 	bl	8001488 <API_DEBOUNCE_Error_Handler>
		break;
 8001414:	e006      	b.n	8001424 <debounceFSM_update+0xd4>
		break;
 8001416:	bf00      	nop
 8001418:	e004      	b.n	8001424 <debounceFSM_update+0xd4>
		break;
 800141a:	bf00      	nop
 800141c:	e002      	b.n	8001424 <debounceFSM_update+0xd4>
		break;
 800141e:	bf00      	nop
 8001420:	e000      	b.n	8001424 <debounceFSM_update+0xd4>
		break;
 8001422:	bf00      	nop
	}

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200000c0 	.word	0x200000c0
 800142c:	200000d0 	.word	0x200000d0

08001430 <readKey>:
  * @brief	Funcion que indica si el pulsador fue presionado. Se coloca en TRUE (presionado) solamente cuando se solto el pulsador
  * 		es decir con un flanco descendente. Una vez que entrega TRUE por haber presionado limpia la variable privada de estado
  * @param  None
  * @retval	TRUE en caso que ha existido un pulso descendente del pulsador - FALSE cuando no se ha presionado o el pulsador sigue en estado presionado
  */
bool_t readKey(void){
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0

	bool_t value = false;
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]

	if(buttonPress){
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <readKey+0x2c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <readKey+0x1c>
		value = true;
 8001442:	2301      	movs	r3, #1
 8001444:	71fb      	strb	r3, [r7, #7]
		buttonPress = false;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <readKey+0x2c>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	}

	return value;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200000c1 	.word	0x200000c1

08001460 <buttonPressed>:
/**
  * @brief  Funcion que ejecuta accion si se presiona LED (no implementado - utilizado)
  * @param  None
  * @retval None
  */
void buttonPressed(void){
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

	//BSP_LED_On(LED2);

}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <buttonReleased>:
  * @brief  Funcion que realiza accion de cambiar variable global privada de boton presionado
  * @param  None
  * @retval None
  */

void buttonReleased(void){
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

	buttonPress = true;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <buttonReleased+0x14>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]

}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	200000c1 	.word	0x200000c1

08001488 <API_DEBOUNCE_Error_Handler>:

static void API_DEBOUNCE_Error_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED1);
 800148c:	2000      	movs	r0, #0
 800148e:	f000 fe1d 	bl	80020cc <BSP_LED_On>
	while (1)
 8001492:	e7fe      	b.n	8001492 <API_DEBOUNCE_Error_Handler+0xa>

08001494 <delayInit>:
  * @brief  Inicializacion de las variables de delay
  * @param  Se debe entregar el puntero a la variable y la duración expresado en milisegundos
  * @retval Ninguno
  * @error Se validan que el puntero entregado no sea nulo y que la duracion sea distinta de cero
*/
void delayInit (delay_t* delay, tick_t duration) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]

	if (delay == NULL	|| duration == 0)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <delayInit+0x16>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <delayInit+0x1a>
		API_DELAY_Error_Handler();
 80014aa:	f000 f83b 	bl	8001524 <API_DELAY_Error_Handler>

	*delay = (delay_t) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	721a      	strb	r2, [r3, #8]
		.startTime = 0,
		.duration =  duration,
		.running = false
	};

}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <delayRead>:
  * 		Retorna true cuando cuando se ha cumplido el tiempo definido
  * @error Se validan que el puntero entregado no sea nulo
*/


bool_t delayRead (delay_t* delay) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

	if (delay == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <delayRead+0x12>
		API_DELAY_Error_Handler();
 80014d6:	f000 f825 	bl	8001524 <API_DELAY_Error_Handler>

	bool_t timeOut = false;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]

	uint32_t currentTime = HAL_GetTick();
 80014de:	f000 ff3f 	bl	8002360 <HAL_GetTick>
 80014e2:	60b8      	str	r0, [r7, #8]


	if (!(delay->running)) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7a1b      	ldrb	r3, [r3, #8]
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <delayRead+0x38>

		delay->running = true;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	721a      	strb	r2, [r3, #8]

		delay->startTime = currentTime;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e00c      	b.n	800151a <delayRead+0x52>

	} else {

		if ((currentTime - delay->startTime) >= delay->duration) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	1ad2      	subs	r2, r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d304      	bcc.n	800151a <delayRead+0x52>

			timeOut = true;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]

			delay->running = false;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	721a      	strb	r2, [r3, #8]

		}

	}

	return timeOut;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <API_DELAY_Error_Handler>:
	}

}

static void API_DELAY_Error_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED1);
 8001528:	2000      	movs	r0, #0
 800152a:	f000 fdcf 	bl	80020cc <BSP_LED_On>
	while (1)
 800152e:	e7fe      	b.n	800152e <API_DELAY_Error_Handler+0xa>

08001530 <_API_LCD_Delay>:
 * @brief  Esta función genera un delay bloqueante
 * @param  Tiempo en milisegundos
 * @retval None
 */
static void _API_LCD_Delay(uint32_t delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 ff1d 	bl	8002378 <HAL_Delay>

	return;
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_API_LCD_Send8bits>:
 * @param  Valor del dato a enviar
 * @param  Tipo de dato: Comando (COMMAND) o Dato (DATA)
 * @retval None
 */
static bool _API_LCD_Send8bits(lcdType_t* lcd, uint8_t value, uint8_t type)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	70fb      	strb	r3, [r7, #3]
 8001552:	4613      	mov	r3, r2
 8001554:	70bb      	strb	r3, [r7, #2]
	bool returnValue = false;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]

	//Se aplica mascara para Nibble superior e inferior
	uint8_t h_nibble = (value & HIGHER_NIBBLE);
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	f023 030f 	bic.w	r3, r3, #15
 8001560:	73bb      	strb	r3, [r7, #14]
	uint8_t l_nibble = ((value << LOWER_NIBBLE) & HIGHER_NIBBLE);
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	737b      	strb	r3, [r7, #13]

	//Tomo la respuesta de cada comando y comparo entre ellas.
	//En caso de error en una se pondrá el valor de retorno en true
	//indicando falla

	returnValue |= _API_LCD_Send4bits(lcd, h_nibble, type);
 8001568:	78ba      	ldrb	r2, [r7, #2]
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f81f 	bl	80015b2 <_API_LCD_Send4bits>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	4313      	orrs	r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
	returnValue |= _API_LCD_Send4bits(lcd, l_nibble, type);
 8001588:	78ba      	ldrb	r2, [r7, #2]
 800158a:	7b7b      	ldrb	r3, [r7, #13]
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f80f 	bl	80015b2 <_API_LCD_Send4bits>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	4313      	orrs	r3, r2
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]

	return returnValue;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]

}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_API_LCD_Send4bits>:
 * @param  Valor del dato a enviar
 * @param  Tipo de dato: Comando (COMMAND) o Dato (DATA)
 * @retval None
 */
static bool _API_LCD_Send4bits(lcdType_t* lcd, uint8_t value, uint8_t type)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70fb      	strb	r3, [r7, #3]
 80015be:	4613      	mov	r3, r2
 80015c0:	70bb      	strb	r3, [r7, #2]
	bool returnValue = false;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]

	if(API_LCD_PORT_Transmit(lcd , (value | EN | type | lcd->backlight) ))
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	78bb      	ldrb	r3, [r7, #2]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	79db      	ldrb	r3, [r3, #7]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f9a8 	bl	8001934 <API_LCD_PORT_Transmit>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_API_LCD_Send4bits+0x3c>
		returnValue = true;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]

	_API_LCD_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff ff9e 	bl	8001530 <_API_LCD_Delay>

	if(API_LCD_PORT_Transmit(lcd , (value | type | lcd->backlight) ))
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	78bb      	ldrb	r3, [r7, #2]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	79db      	ldrb	r3, [r3, #7]
 8001600:	4313      	orrs	r3, r2
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f994 	bl	8001934 <API_LCD_PORT_Transmit>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <_API_LCD_Send4bits+0x64>
			returnValue = true;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]

	return returnValue;
 8001616:	7bfb      	ldrb	r3, [r7, #15]

}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <API_LCD_Error_Handler>:
 * @brief  Funcion diseña para container de error
 * @param  None
 * @retval None
 */
static void API_LCD_Error_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001624:	2001      	movs	r0, #1
 8001626:	f000 fd51 	bl	80020cc <BSP_LED_On>
	while (1)
 800162a:	e7fe      	b.n	800162a <API_LCD_Error_Handler+0xa>

0800162c <lcdInit>:
 * @param	character: Configura entre 5x8 dots o 5x10 dots
 * @param	bitmode: Configuracion del modo de trabajo 4bits u 8bits
 * @retval	un valor del tipo lcdStatusType_t indicando si fue Ok o el error
 */
lcdStatusType_t lcdInit(lcdType_t *lcd, I2C_HandleTypeDef *hi2c1, uint8_t address, uint8_t columns, uint8_t rows, uint8_t character, uint8_t bitmode)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	460b      	mov	r3, r1
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	4613      	mov	r3, r2
 8001640:	71bb      	strb	r3, [r7, #6]
	if(lcd == NULL || hi2c1 == NULL || address == 0x00)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <lcdInit+0x28>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <lcdInit+0x28>
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <lcdInit+0x2c>
		return LCD_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e089      	b.n	800176c <lcdInit+0x140>

	uint8_t _displayFunction = 0x00;
 8001658:	2300      	movs	r3, #0
 800165a:	75fb      	strb	r3, [r7, #23]

	//Se definen parametros por default
	const uint8_t _displayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKCURSOROFF;		//Default: LCD On, Cursor Off, Blinking Off
 800165c:	2304      	movs	r3, #4
 800165e:	75bb      	strb	r3, [r7, #22]
	const uint8_t _displayMode = LCD_ENTRYLEFT;
 8001660:	2302      	movs	r3, #2
 8001662:	757b      	strb	r3, [r7, #21]

	//Se inicializa los parametros del tipo puntero.
	lcd->hi2c1 = hi2c1;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	601a      	str	r2, [r3, #0]
	lcd->rows = rows;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001670:	711a      	strb	r2, [r3, #4]
    lcd->columns = columns;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	79ba      	ldrb	r2, [r7, #6]
 8001676:	715a      	strb	r2, [r3, #5]
    lcd->address = address;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	719a      	strb	r2, [r3, #6]
    lcd->backlight = LCD_BACKLIGHT; 	//Default backlight On
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2208      	movs	r2, #8
 8001682:	71da      	strb	r2, [r3, #7]
    lcd->bitmode = bitmode;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800168a:	721a      	strb	r2, [r3, #8]

    //Se determina parametros del display
    if(rows > 1)
 800168c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d903      	bls.n	800169c <lcdInit+0x70>
    	_displayFunction |= LCD_2LINE;
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	75fb      	strb	r3, [r7, #23]

    if(character != 0)
 800169c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <lcdInit+0x80>
    	_displayFunction |= LCD_5x10DOTS;
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	75fb      	strb	r3, [r7, #23]


    //Inicialiazamos el puerto I2C. Si devuelve error se cancela la secuencia y se retorna error
    if(API_LCD_PORT_Init(lcd))
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f929 	bl	8001904 <API_LCD_PORT_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <lcdInit+0x90>
    	return LCD_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e057      	b.n	800176c <lcdInit+0x140>

    /* A partir de aca se realiza la configuración que se indica en la pagina 45 & 46 del
     * datasheet del HD44780.
     */

    _API_LCD_Delay(DELAY_50_ms);
 80016bc:	2032      	movs	r0, #50	; 0x32
 80016be:	f7ff ff37 	bl	8001530 <_API_LCD_Delay>
    _API_LCD_Send4bits(lcd , LCD_INIT1 , COMMAND);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2130      	movs	r1, #48	; 0x30
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff ff73 	bl	80015b2 <_API_LCD_Send4bits>
    _API_LCD_Delay(DELAY_5_ms);
 80016cc:	2005      	movs	r0, #5
 80016ce:	f7ff ff2f 	bl	8001530 <_API_LCD_Delay>
    _API_LCD_Send4bits(lcd , LCD_INIT1 , COMMAND);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2130      	movs	r1, #48	; 0x30
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f7ff ff6b 	bl	80015b2 <_API_LCD_Send4bits>
    _API_LCD_Delay(DELAY_1_ms);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff ff27 	bl	8001530 <_API_LCD_Delay>
    _API_LCD_Send4bits(lcd , LCD_INIT1 , COMMAND);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2130      	movs	r1, #48	; 0x30
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff ff63 	bl	80015b2 <_API_LCD_Send4bits>
    _API_LCD_Delay(DELAY_10_ms);
 80016ec:	200a      	movs	r0, #10
 80016ee:	f7ff ff1f 	bl	8001530 <_API_LCD_Delay>
    _API_LCD_Send4bits(lcd , LCD_FUNCTIONSET , COMMAND);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff ff5b 	bl	80015b2 <_API_LCD_Send4bits>
    _API_LCD_Delay(DELAY_10_ms);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f7ff ff17 	bl	8001530 <_API_LCD_Delay>

    _API_LCD_Send8bits(lcd , (LCD_FUNCTIONSET | _displayFunction) , COMMAND);
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff ff19 	bl	8001546 <_API_LCD_Send8bits>
    _API_LCD_Delay(DELAY_1_ms);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff ff0b 	bl	8001530 <_API_LCD_Delay>
    _API_LCD_Send8bits(lcd , (LCD_DISPLAYCONTROL | LCD_DISPLAYOFF) , COMMAND);
 800171a:	2200      	movs	r2, #0
 800171c:	2108      	movs	r1, #8
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff ff11 	bl	8001546 <_API_LCD_Send8bits>
    _API_LCD_Delay(DELAY_1_ms);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff ff03 	bl	8001530 <_API_LCD_Delay>
    _API_LCD_Send8bits(lcd , LCD_CLEARDISPLAY , COMMAND);
 800172a:	2200      	movs	r2, #0
 800172c:	2101      	movs	r1, #1
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff ff09 	bl	8001546 <_API_LCD_Send8bits>
    _API_LCD_Delay(DELAY_2_ms);
 8001734:	2002      	movs	r0, #2
 8001736:	f7ff fefb 	bl	8001530 <_API_LCD_Delay>
    _API_LCD_Send8bits(lcd , (LCD_ENTRYMODESET | _displayMode) , COMMAND);
 800173a:	7d7b      	ldrb	r3, [r7, #21]
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7ff fefd 	bl	8001546 <_API_LCD_Send8bits>
    _API_LCD_Delay(DELAY_1_ms);
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff feef 	bl	8001530 <_API_LCD_Delay>

    //Se procede a encender el display
    _API_LCD_Send8bits(lcd , (LCD_DISPLAYCONTROL | _displayControl) , COMMAND);
 8001752:	7dbb      	ldrb	r3, [r7, #22]
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff fef1 	bl	8001546 <_API_LCD_Send8bits>
    _API_LCD_Delay(DELAY_1_ms);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fee3 	bl	8001530 <_API_LCD_Delay>

    return LCD_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <lcdClear>:
 * @brief  Funcion que ejecuta funcion Clear del display
 * @param  Puntero al handler del LCD
 * @retval None
 */
void lcdClear(lcdType_t *lcd)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if(lcd == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <lcdClear+0x12>
		API_LCD_Error_Handler();
 8001782:	f7ff ff4d 	bl	8001620 <API_LCD_Error_Handler>

	_API_LCD_Send8bits(lcd , LCD_CLEARDISPLAY , COMMAND);
 8001786:	2200      	movs	r2, #0
 8001788:	2101      	movs	r1, #1
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fedb 	bl	8001546 <_API_LCD_Send8bits>
	_API_LCD_Delay(DELAY_2_ms);
 8001790:	2002      	movs	r0, #2
 8001792:	f7ff fecd 	bl	8001530 <_API_LCD_Delay>

	return;
 8001796:	bf00      	nop
}
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <lcdReturnHome>:
 * @brief  Funcion que ejecuta funcion Retunr del display
 * @param  Puntero al handler del LCD
 * @retval None
 */
void lcdReturnHome(lcdType_t *lcd)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
	if(lcd == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <lcdReturnHome+0x12>
			API_LCD_Error_Handler();
 80017ac:	f7ff ff38 	bl	8001620 <API_LCD_Error_Handler>

	_API_LCD_Send8bits(lcd , LCD_RETURNHOME , COMMAND);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2102      	movs	r1, #2
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fec6 	bl	8001546 <_API_LCD_Send8bits>
	_API_LCD_Delay(DELAY_2_ms);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7ff feb8 	bl	8001530 <_API_LCD_Delay>

	return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <lcdBacklight>:
 * @brief  Funcion que setea el parametro backligth y enciende
 * @param  Puntero al handler del LCD
 * @retval None
 */
void lcdBacklight(lcdType_t *lcd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	if(lcd == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <lcdBacklight+0x12>
		API_LCD_Error_Handler();
 80017d6:	f7ff ff23 	bl	8001620 <API_LCD_Error_Handler>

	lcd->backlight = LCD_BACKLIGHT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2208      	movs	r2, #8
 80017de:	71da      	strb	r2, [r3, #7]
	_API_LCD_Send4bits(lcd , LCD_BACKLIGHT , COMMAND);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2108      	movs	r1, #8
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fee4 	bl	80015b2 <_API_LCD_Send4bits>

	return;
 80017ea:	bf00      	nop
}
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <lcdNoBacklight>:
 * @brief  Funcion que desetea el parametro backligth y enciende
 * @param  Puntero al handler del LCD
 * @retval None
 */
void lcdNoBacklight(lcdType_t *lcd)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	if(lcd == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <lcdNoBacklight+0x12>
		API_LCD_Error_Handler();
 8001800:	f7ff ff0e 	bl	8001620 <API_LCD_Error_Handler>

	lcd->backlight = LCD_NOBACKLIGHT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	71da      	strb	r2, [r3, #7]
	_API_LCD_Send4bits(lcd , LCD_NOBACKLIGHT , COMMAND);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fecf 	bl	80015b2 <_API_LCD_Send4bits>

	return;
 8001814:	bf00      	nop
}
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <lcdSetCursorPosition>:
 * @param  Valor de columna a posicionar. Valores de 0 a cantidad definida
 * @param  Valor de fila a posicionar. Valores de 0 a cantidad definida
 * @retval None
 */
void lcdSetCursorPosition(lcdType_t *lcd, uint8_t column, uint8_t row)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
 8001828:	4613      	mov	r3, r2
 800182a:	70bb      	strb	r3, [r7, #2]
	if(lcd == NULL || row > lcd->rows || column > lcd->columns)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <lcdSetCursorPosition+0x2a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	791b      	ldrb	r3, [r3, #4]
 8001836:	78ba      	ldrb	r2, [r7, #2]
 8001838:	429a      	cmp	r2, r3
 800183a:	d804      	bhi.n	8001846 <lcdSetCursorPosition+0x2a>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	795b      	ldrb	r3, [r3, #5]
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	429a      	cmp	r2, r3
 8001844:	d901      	bls.n	800184a <lcdSetCursorPosition+0x2e>
		API_LCD_Error_Handler();
 8001846:	f7ff feeb 	bl	8001620 <API_LCD_Error_Handler>

	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <lcdSetCursorPosition+0x60>)
 800184c:	60bb      	str	r3, [r7, #8]

	uint8_t data = LCD_SETDDRAMADDRESS | (column + row_offsets[row]);
 800184e:	78bb      	ldrb	r3, [r7, #2]
 8001850:	3310      	adds	r3, #16
 8001852:	443b      	add	r3, r7
 8001854:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	4413      	add	r3, r2
 800185c:	b2db      	uxtb	r3, r3
 800185e:	b25b      	sxtb	r3, r3
 8001860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001864:	b25b      	sxtb	r3, r3
 8001866:	73fb      	strb	r3, [r7, #15]

	_API_LCD_Send8bits(lcd, data, COMMAND);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fe69 	bl	8001546 <_API_LCD_Send8bits>

}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	54144000 	.word	0x54144000

08001880 <lcdPrintStr>:
 * @param  Puntero a la cadena de caracteres
 * @param  Largo de la cadena
 * @retval None
 */
void lcdPrintStr(lcdType_t *lcd, const uint8_t * data, uint8_t length)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	4613      	mov	r3, r2
 800188c:	71fb      	strb	r3, [r7, #7]
	if(lcd == NULL || data == NULL)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <lcdPrintStr+0x1a>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <lcdPrintStr+0x1e>
		API_LCD_Error_Handler();
 800189a:	f7ff fec1 	bl	8001620 <API_LCD_Error_Handler>

    for (uint8_t i = 0; i < length-1; i++) {
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]
 80018a2:	e00a      	b.n	80018ba <lcdPrintStr+0x3a>
        lcdPrintChar(lcd, data[i]);
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f80d 	bl	80018ce <lcdPrintChar>
    for (uint8_t i = 0; i < length-1; i++) {
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	3301      	adds	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
 80018ba:	7dfa      	ldrb	r2, [r7, #23]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	3b01      	subs	r3, #1
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbef      	blt.n	80018a4 <lcdPrintStr+0x24>

        }

}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <lcdPrintChar>:
 * @param  Puntero al handler del LCD
 * @param  Caracter en codigo ascii a imprimir
 * @retval None
 */
void lcdPrintChar(lcdType_t *lcd, uint8_t data)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	70fb      	strb	r3, [r7, #3]
	if(lcd == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <lcdPrintChar+0x16>
		API_LCD_Error_Handler();
 80018e0:	f7ff fe9e 	bl	8001620 <API_LCD_Error_Handler>

	_API_LCD_Send8bits(lcd, data, DATA);
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4619      	mov	r1, r3
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fe2b 	bl	8001546 <_API_LCD_Send8bits>

	return;
 80018f0:	bf00      	nop

}
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <API_LCD_PORT_Error_Handler>:
 * @brief  Funcion diseña para container de error
 * @param  None
 * @retval None
 */
static void API_LCD_PORT_Error_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f000 fbe5 	bl	80020cc <BSP_LED_On>
	while (1)
 8001902:	e7fe      	b.n	8001902 <API_LCD_PORT_Error_Handler+0xa>

08001904 <API_LCD_PORT_Init>:
 * 			y GPIO previamente.
 * @param  Puntero al handler del LCD
 * @retval Un valor false si fue exitoso y true si hubo error
 */
bool API_LCD_PORT_Init(lcdType_t *lcd)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	if(lcd == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <API_LCD_PORT_Init+0x12>
		API_LCD_PORT_Error_Handler();
 8001912:	f7ff fff1 	bl	80018f8 <API_LCD_PORT_Error_Handler>

	if(HAL_I2C_Init (lcd->hi2c1) != HAL_OK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f001 f840 	bl	80029a0 <HAL_I2C_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <API_LCD_PORT_Init+0x26>
		return true;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <API_LCD_PORT_Init+0x28>
	else
		return false;
 800192a:	2300      	movs	r3, #0

}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <API_LCD_PORT_Transmit>:
 * @brief  Esta función envia datos por el puerto I2C. Se debio iniciarlizar previamente
 * 			el puerto I2C
 * @param  Puntero al handler del LCD
 * @retval Un valor false si fue exitoso y true si hubo error
 */
bool API_LCD_PORT_Transmit(lcdType_t *lcd, uint8_t value){
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af02      	add	r7, sp, #8
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]

	if(lcd == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <API_LCD_PORT_Transmit+0x16>
		API_LCD_PORT_Error_Handler();
 8001946:	f7ff ffd7 	bl	80018f8 <API_LCD_PORT_Error_Handler>

	//Se hace la transmisión y en base al retorno (HAL_OK o HAL_NOK) se retorna true o false

	if(HAL_I2C_Master_Transmit(lcd->hi2c1, (lcd->address)<<1 ,&value, sizeof(value),HAL_MAX_DELAY)!=HAL_OK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	799b      	ldrb	r3, [r3, #6]
 8001952:	b29b      	uxth	r3, r3
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	b299      	uxth	r1, r3
 8001958:	1cfa      	adds	r2, r7, #3
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2301      	movs	r3, #1
 8001962:	f001 f96b 	bl	8002c3c <HAL_I2C_Master_Transmit>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <API_LCD_PORT_Transmit+0x3c>
		return true;
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <API_LCD_PORT_Transmit+0x3e>
	else
		return false;
 8001970:	2300      	movs	r3, #0

}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_DHT_GetData>:
 * @brief Esta funcion recolecta la data del sensor
 * @param  Puntero al handler del sensor
 * @retval Una variable de estado segun se realizo la operacion
 */
static dhtStatusType_t _DHT_GetData(dht_t* sensor)
{
 800197a:	b590      	push	{r4, r7, lr}
 800197c:	b0db      	sub	sp, #364	; 0x16c
 800197e:	af00      	add	r7, sp, #0
 8001980:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001984:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001988:	6018      	str	r0, [r3, #0]
	dhtStatusType_t _sensor_status = DHT_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	uint8_t data[5] = {0};
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3150 	strb.w	r3, [r7, #336]	; 0x150

	//Inicializamos la funcion delay
	_DWT_Delay_Init();
 800199c:	f000 f9a4 	bl	8001ce8 <_DWT_Delay_Init>

	/*	Seteamos el pin como output, luego seteamos el estado bajo, se espera
	 * 	un delay segun tipo sensor y luego en estado alto para luego setear el
	 * 	pin como input y recibir respuesta del sensor
	 */
	DHT_PORT_SetPinOutput(sensor);
 80019a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	f000 fab7 	bl	8001f1c <DHT_PORT_SetPinOutput>

	DHT_PORT_SetPinState(sensor, LOW);
 80019ae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019b2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019b6:	2100      	movs	r1, #0
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	f000 faed 	bl	8001f98 <DHT_PORT_SetPinState>

	switch(sensor->type){
 80019be:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019c2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	795b      	ldrb	r3, [r3, #5]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d804      	bhi.n	80019da <_DHT_GetData+0x60>
	case DHT22:
	case AM2301:
		_DHT_delay(1200);
 80019d0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80019d4:	f000 f9b8 	bl	8001d48 <_DHT_delay>
		break;
 80019d8:	e004      	b.n	80019e4 <_DHT_GetData+0x6a>

	case DHT11:
	default:
		_DHT_delay(18000);
 80019da:	f244 6050 	movw	r0, #18000	; 0x4650
 80019de:	f000 f9b3 	bl	8001d48 <_DHT_delay>
		break;
 80019e2:	bf00      	nop
	}

    DHT_PORT_SetPinState(sensor, HIGH);
 80019e4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019ec:	2101      	movs	r1, #1
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	f000 fad2 	bl	8001f98 <DHT_PORT_SetPinState>

    _DHT_delay(30);
 80019f4:	201e      	movs	r0, #30
 80019f6:	f000 f9a7 	bl	8001d48 <_DHT_delay>

	DHT_PORT_SetPinInput(sensor);
 80019fa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019fe:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	f000 faa9 	bl	8001f5a <DHT_PORT_SetPinInput>
	 * 	cual corresponde en la mitad de cada pulso bajo y alto que se esperan
	 */

	// First expect a low signal for ~80 microseconds followed by a high signal
	// for ~80 microseconds again.
	_DHT_delay(5);
 8001a08:	2005      	movs	r0, #5
 8001a0a:	f000 f99d 	bl	8001d48 <_DHT_delay>
	if(DHT_PORT_ExpectPulse(sensor,LOW) == DHT_TIMEOUT_COUNT) {
 8001a0e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a12:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a16:	2100      	movs	r1, #0
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	f000 fad1 	bl	8001fc0 <DHT_PORT_ExpectPulse>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a24:	d105      	bne.n	8001a32 <_DHT_GetData+0xb8>
		_sensor_status = DHT_TIMEOUT;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		return _sensor_status;
 8001a2c:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001a30:	e0c4      	b.n	8001bbc <_DHT_GetData+0x242>
	}
	_DHT_delay(5);
 8001a32:	2005      	movs	r0, #5
 8001a34:	f000 f988 	bl	8001d48 <_DHT_delay>
	if(DHT_PORT_ExpectPulse(sensor,HIGH) == DHT_TIMEOUT_COUNT) {
 8001a38:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a40:	2101      	movs	r1, #1
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f000 fabc 	bl	8001fc0 <DHT_PORT_ExpectPulse>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4e:	d105      	bne.n	8001a5c <_DHT_GetData+0xe2>
		_sensor_status = DHT_TIMEOUT;
 8001a50:	2302      	movs	r3, #2
 8001a52:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		return _sensor_status;
 8001a56:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001a5a:	e0af      	b.n	8001bbc <_DHT_GetData+0x242>
	}

	uint32_t _cycles[80];

 	for(int i = 0; i < 80; i += 2) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001a62:	e027      	b.n	8001ab4 <_DHT_GetData+0x13a>
 		_cycles[i] = DHT_PORT_ExpectPulse(sensor,LOW);
 8001a64:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a68:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	f000 faa6 	bl	8001fc0 <DHT_PORT_ExpectPulse>
 8001a74:	4601      	mov	r1, r0
 8001a76:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a7a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001a7e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		_cycles[i+1] = DHT_PORT_ExpectPulse(sensor,HIGH);
 8001a86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a8a:	1c5c      	adds	r4, r3, #1
 8001a8c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a94:	2101      	movs	r1, #1
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	f000 fa92 	bl	8001fc0 <DHT_PORT_ExpectPulse>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001aa2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001aa6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 	for(int i = 0; i < 80; i += 2) {
 8001aaa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001ab4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ab8:	2b4f      	cmp	r3, #79	; 0x4f
 8001aba:	ddd3      	ble.n	8001a64 <_DHT_GetData+0xea>
	}

	for(int i = 0; i < 40; ++i) {
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001ac2:	e054      	b.n	8001b6e <_DHT_GetData+0x1f4>
		uint32_t _lowCycles = _cycles[2 * i];
 8001ac4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ac8:	005a      	lsls	r2, r3, #1
 8001aca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001ace:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		uint32_t _highCycles = _cycles[2 * i + 1];
 8001ada:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001ae6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		if((_lowCycles == DHT_TIMEOUT) || (_highCycles == DHT_TIMEOUT)) {
 8001af2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d003      	beq.n	8001b02 <_DHT_GetData+0x188>
 8001afa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d105      	bne.n	8001b0e <_DHT_GetData+0x194>
			_sensor_status = DHT_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			return _sensor_status;
 8001b08:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001b0c:	e056      	b.n	8001bbc <_DHT_GetData+0x242>
		}
		data[i / 8] <<= 1;
 8001b0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da00      	bge.n	8001b18 <_DHT_GetData+0x19e>
 8001b16:	3307      	adds	r3, #7
 8001b18:	10db      	asrs	r3, r3, #3
 8001b1a:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8001b1e:	443a      	add	r2, r7
 8001b20:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8001b24:	0052      	lsls	r2, r2, #1
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b2c:	443b      	add	r3, r7
 8001b2e:	f803 2c1c 	strb.w	r2, [r3, #-28]

		if(_highCycles > _lowCycles) {
 8001b32:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001b36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d912      	bls.n	8001b64 <_DHT_GetData+0x1ea>

			data[i / 8] |= 1;
 8001b3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da00      	bge.n	8001b48 <_DHT_GetData+0x1ce>
 8001b46:	3307      	adds	r3, #7
 8001b48:	10db      	asrs	r3, r3, #3
 8001b4a:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8001b4e:	443a      	add	r2, r7
 8001b50:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b5e:	443b      	add	r3, r7
 8001b60:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(int i = 0; i < 40; ++i) {
 8001b64:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001b6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b72:	2b27      	cmp	r3, #39	; 0x27
 8001b74:	dda6      	ble.n	8001ac4 <_DHT_GetData+0x14a>
		}

	}

	// Se validad que los checksum correspondan
	if (data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 8001b76:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8001b80:	4619      	mov	r1, r3
 8001b82:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8001b86:	440b      	add	r3, r1
 8001b88:	f897 114e 	ldrb.w	r1, [r7, #334]	; 0x14e
 8001b8c:	440b      	add	r3, r1
 8001b8e:	f897 114f 	ldrb.w	r1, [r7, #335]	; 0x14f
 8001b92:	440b      	add	r3, r1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d005      	beq.n	8001ba6 <_DHT_GetData+0x22c>
		_sensor_status = DHT_CHECKSUM;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		return _sensor_status;
 8001ba0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001ba4:	e00a      	b.n	8001bbc <_DHT_GetData+0x242>
	}

	_DHT_ComputeData(sensor, data);
 8001ba6:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8001baa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bae:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f000 f807 	bl	8001bc8 <_DHT_ComputeData>

	return DHT_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}
	...

08001bc8 <_DHT_ComputeData>:
 * @param  Puntero al handler del sensor
 * @param  Un array con la informacion recolectada
 * @retval No devuelve nada por nombre, almacene en puntero
 */
static void _DHT_ComputeData(dht_t* sensor, uint8_t data[])
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	float value = 0;
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]

	if(data == NULL){
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d103      	bne.n	8001be6 <_DHT_ComputeData+0x1e>
		sensor->dataValid = DHT_NO_VALID_DATA;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	761a      	strb	r2, [r3, #24]
		return;
 8001be4:	e079      	b.n	8001cda <_DHT_ComputeData+0x112>
	}

	switch(sensor->type){
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	795b      	ldrb	r3, [r3, #5]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <_DHT_ComputeData+0x32>
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db6b      	blt.n	8001cca <_DHT_ComputeData+0x102>
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d868      	bhi.n	8001cca <_DHT_ComputeData+0x102>
 8001bf8:	e017      	b.n	8001c2a <_DHT_ComputeData+0x62>
	case DHT11:
		//Procesa Temperatura
		value = data[2];
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c08:	edc7 7a03 	vstr	s15, [r7, #12]
		sensor->temperature = value;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	609a      	str	r2, [r3, #8]
		//Procesa Humedad
		value = data[0];
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1e:	edc7 7a03 	vstr	s15, [r7, #12]
		sensor->humidity = value;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	60da      	str	r2, [r3, #12]

		break;
 8001c28:	e053      	b.n	8001cd2 <_DHT_ComputeData+0x10a>

	case DHT22:
	case AM2301:
		//Procesa Temperatura
		value = (data[2] & 0x7F) << 8 | data[3];
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	3203      	adds	r2, #3
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c46:	edc7 7a03 	vstr	s15, [r7, #12]
		value *= 0.1;
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7fe fc34 	bl	80004b8 <__aeabi_f2d>
 8001c50:	a323      	add	r3, pc, #140	; (adr r3, 8001ce0 <_DHT_ComputeData+0x118>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fc87 	bl	8000568 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ff31 	bl	8000ac8 <__aeabi_d2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	60fb      	str	r3, [r7, #12]
		if (data[2] & 0x80) {
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da05      	bge.n	8001c82 <_DHT_ComputeData+0xba>
			value *= -1;
 8001c76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c7a:	eef1 7a67 	vneg.f32	s15, s15
 8001c7e:	edc7 7a03 	vstr	s15, [r7, #12]
		}
		sensor->temperature = value;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	609a      	str	r2, [r3, #8]

		//Procesa Humedad
		value = data[0] << 8 | data[1];
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	3201      	adds	r2, #1
 8001c92:	7812      	ldrb	r2, [r2, #0]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	edc7 7a03 	vstr	s15, [r7, #12]
		value *= 0.1;
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f7fe fc08 	bl	80004b8 <__aeabi_f2d>
 8001ca8:	a30d      	add	r3, pc, #52	; (adr r3, 8001ce0 <_DHT_ComputeData+0x118>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fc5b 	bl	8000568 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff05 	bl	8000ac8 <__aeabi_d2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	60fb      	str	r3, [r7, #12]
		sensor->humidity = value;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	60da      	str	r2, [r3, #12]

		break;
 8001cc8:	e003      	b.n	8001cd2 <_DHT_ComputeData+0x10a>

	default:
		//En caso que se llegue a esta opcion hubo error y se coloca data como invalida
		sensor->dataValid = DHT_NO_VALID_DATA;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	761a      	strb	r2, [r3, #24]
		return;
 8001cd0:	e003      	b.n	8001cda <_DHT_ComputeData+0x112>
		break;
	}

	sensor->dataValid = DHT_VALID_DATA;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	761a      	strb	r2, [r3, #24]

	return;
 8001cd8:	bf00      	nop
}
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	9999999a 	.word	0x9999999a
 8001ce4:	3fb99999 	.word	0x3fb99999

08001ce8 <_DWT_Delay_Init>:
 * @brief Esta funcion inicializa el Delay en microsegundo
 * @param  None
 * @retval Correcto o no correcto
 */
static uint32_t _DWT_Delay_Init(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <_DWT_Delay_Init+0x58>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <_DWT_Delay_Init+0x58>)
 8001cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_DWT_Delay_Init+0x58>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <_DWT_Delay_Init+0x58>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <_DWT_Delay_Init+0x5c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <_DWT_Delay_Init+0x5c>)
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <_DWT_Delay_Init+0x5c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <_DWT_Delay_Init+0x5c>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <_DWT_Delay_Init+0x5c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001d22:	bf00      	nop
     __ASM volatile ("NOP");
 8001d24:	bf00      	nop
  __ASM volatile ("NOP");
 8001d26:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <_DWT_Delay_Init+0x5c>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <_DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001d30:	2300      	movs	r3, #0
 8001d32:	e000      	b.n	8001d36 <_DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001d34:	2301      	movs	r3, #1
  }
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000edf0 	.word	0xe000edf0
 8001d44:	e0001000 	.word	0xe0001000

08001d48 <_DHT_delay>:
 * @brief Esta funcion implementa Delay bloqueante en microsegundo
 * @param  MIcrosegundo de delay
 * @retval None
 */
static inline void _DHT_delay(volatile uint32_t microseconds)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <_DHT_delay+0x40>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001d56:	f001 ff33 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <_DHT_delay+0x44>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001d6c:	bf00      	nop
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <_DHT_delay+0x40>)
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad2      	subs	r2, r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d3f8      	bcc.n	8001d6e <_DHT_delay+0x26>
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e0001000 	.word	0xe0001000
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <DHT_Init>:
 * @param  Pin del puerto GPIO
 * @param  Tipo de sensor DHT11 o DHT22
 * @retval Una variable de estado del proceso
 */
dhtStatusType_t DHT_Init(dht_t* sensor, GPIO_TypeDef* GPIO_Port, uint8_t GPIO_Pin, dhtType_t type)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	460b      	mov	r3, r1
 8001da0:	71fb      	strb	r3, [r7, #7]
 8001da2:	4613      	mov	r3, r2
 8001da4:	71bb      	strb	r3, [r7, #6]
	sensor->GPIO_Port = GPIO_Port;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	601a      	str	r2, [r3, #0]
	sensor->GPIO_Pin = GPIO_Pin;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	711a      	strb	r2, [r3, #4]
	sensor->type = type;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	79ba      	ldrb	r2, [r7, #6]
 8001db6:	715a      	strb	r2, [r3, #5]
	sensor->temperature = 0;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
	sensor->humidity = 0;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
	sensor->temperatureUnit = C;							//Unidad °C por default
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	741a      	strb	r2, [r3, #16]
	sensor->lastRead = HAL_GetTick() - MIN_INTERVAL_DHT;	//Inicializamos con valor pasado
 8001dce:	f000 fac7 	bl	8002360 <HAL_GetTick>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	615a      	str	r2, [r3, #20]
	sensor->dataValid = DHT_NO_VALID_DATA;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	761a      	strb	r2, [r3, #24]

	return DHT_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <DHT_Read>:
 * @param  Puntero al handler del sensor
 * @param  Unidad enq ue se desea la medicion
 * @retval Una variable de estado del proceso
 */
dhtStatusType_t DHT_Read(dht_t* sensor, tempUnit_t unit)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
	dhtStatusType_t status = DHT_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

	uint32_t currentTime = HAL_GetTick();
 8001dfc:	f000 fab0 	bl	8002360 <HAL_GetTick>
 8001e00:	60b8      	str	r0, [r7, #8]

	if( (sensor->lastRead - currentTime) < MIN_INTERVAL_DHT)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e0e:	d201      	bcs.n	8001e14 <DHT_Read+0x28>
		return status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	e016      	b.n	8001e42 <DHT_Read+0x56>

	sensor->lastRead = currentTime;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	615a      	str	r2, [r3, #20]

	status = _DHT_GetData(sensor);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fdad 	bl	800197a <_DHT_GetData>
 8001e20:	4603      	mov	r3, r0
 8001e22:	73fb      	strb	r3, [r7, #15]

	if( status != DHT_OK)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <DHT_Read+0x42>
		return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	e009      	b.n	8001e42 <DHT_Read+0x56>

	if( unit == F)
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d105      	bne.n	8001e40 <DHT_Read+0x54>
		status = DHT_ConvertUnit(sensor, F);
 8001e34:	2102      	movs	r1, #2
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f80a 	bl	8001e50 <DHT_ConvertUnit>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]

	return status;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	0000      	movs	r0, r0
 8001e4c:	0000      	movs	r0, r0
	...

08001e50 <DHT_ConvertUnit>:
 * @param  Puntero al handler del sensor
 * @param  Unidad enq ue se desea la medicion
 * @retval Una variable de estado del proceso
 */
dhtStatusType_t DHT_ConvertUnit(dht_t* sensor, tempUnit_t unit)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
	dhtStatusType_t status = DHT_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	72fb      	strb	r3, [r7, #11]

	if(sensor->dataValid == DHT_NO_VALID_DATA){
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d103      	bne.n	8001e70 <DHT_ConvertUnit+0x20>
		status = DHT_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	72fb      	strb	r3, [r7, #11]
		return status;
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	e049      	b.n	8001f04 <DHT_ConvertUnit+0xb4>
	}

	if(sensor->temperatureUnit == unit){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7c1b      	ldrb	r3, [r3, #16]
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d103      	bne.n	8001e82 <DHT_ConvertUnit+0x32>
		status = DHT_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	72fb      	strb	r3, [r7, #11]
		return status;
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
 8001e80:	e040      	b.n	8001f04 <DHT_ConvertUnit+0xb4>
	}

	float temperature = sensor->temperature;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	60fb      	str	r3, [r7, #12]

	switch(unit){
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d119      	bne.n	8001ec2 <DHT_ConvertUnit+0x72>
	case C:
		temperature = temperature * 1.8 + 32;
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7fe fb12 	bl	80004b8 <__aeabi_f2d>
 8001e94:	a31e      	add	r3, pc, #120	; (adr r3, 8001f10 <DHT_ConvertUnit+0xc0>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fb65 	bl	8000568 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <DHT_ConvertUnit+0xc8>)
 8001eac:	f7fe f9a6 	bl	80001fc <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe06 	bl	8000ac8 <__aeabi_d2f>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60fb      	str	r3, [r7, #12]
		break;
 8001ec0:	e019      	b.n	8001ef6 <DHT_ConvertUnit+0xa6>

	case F:
	default:

		temperature = temperature * 1.8 + 32;
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7fe faf8 	bl	80004b8 <__aeabi_f2d>
 8001ec8:	a311      	add	r3, pc, #68	; (adr r3, 8001f10 <DHT_ConvertUnit+0xc0>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fb4b 	bl	8000568 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <DHT_ConvertUnit+0xc8>)
 8001ee0:	f7fe f98c 	bl	80001fc <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fdec 	bl	8000ac8 <__aeabi_d2f>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60fb      	str	r3, [r7, #12]
		break;
 8001ef4:	bf00      	nop
	}

	sensor->temperature = temperature;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	609a      	str	r2, [r3, #8]
	sensor->temperatureUnit = unit;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	741a      	strb	r2, [r3, #16]

	return status;
 8001f02:	7afb      	ldrb	r3, [r7, #11]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	f3af 8000 	nop.w
 8001f10:	cccccccd 	.word	0xcccccccd
 8001f14:	3ffccccc 	.word	0x3ffccccc
 8001f18:	40400000 	.word	0x40400000

08001f1c <DHT_PORT_SetPinOutput>:
 * @param  Puntero a sensor para tomar luego Puerto GPIO &
 * 			Pin GPIO
 * @retval None
 */
void DHT_PORT_SetPinOutput(dht_t * sensor)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = sensor->GPIO_Pin;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	791b      	ldrb	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(sensor->GPIO_Port, &GPIO_InitStruct);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f107 020c 	add.w	r2, r7, #12
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fb49 	bl	80025e4 <HAL_GPIO_Init>
}
 8001f52:	bf00      	nop
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <DHT_PORT_SetPinInput>:
 * @param  Puntero a sensor para tomar luego Puerto GPIO &
 * 			Pin GPIO
 * @retval None
 */
void DHT_PORT_SetPinInput(dht_t * sensor)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b088      	sub	sp, #32
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = sensor->GPIO_Pin;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	791b      	ldrb	r3, [r3, #4]
 8001f76:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(sensor->GPIO_Port, &GPIO_InitStruct);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f107 020c 	add.w	r2, r7, #12
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fb2a 	bl	80025e4 <HAL_GPIO_Init>
}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <DHT_PORT_SetPinState>:
 * @param  Puntero a sensor para tomar luego Puerto GPIO &
 * 			Pin GPIO y estado a setear (LOW / HIGH)
 * @retval None
 */
void DHT_PORT_SetPinState(dht_t * sensor, dhtPortState_t state)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(sensor->GPIO_Port,sensor->GPIO_Pin, (GPIO_PinState) state);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	791b      	ldrb	r3, [r3, #4]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f000 fcdb 	bl	800296c <HAL_GPIO_WritePin>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <DHT_PORT_ExpectPulse>:
 * @param  Puntero a sensor para tomar luego Puerto GPIO &
 * 			Pin GPIO y estado a setear (LOW / HIGH)
 * @retval None
 */
uint32_t DHT_PORT_ExpectPulse(dht_t * sensor, dhtPortState_t state)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
	uint32_t _count = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
	const uint32_t _maxcycles = DHT_PORT_TIMEOUT * (HAL_RCC_GetHCLKFreq() / 1000000);
 8001fd0:	f001 fdf6 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <DHT_PORT_ExpectPulse+0x68>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	0c9b      	lsrs	r3, r3, #18
 8001fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	60bb      	str	r3, [r7, #8]

	while (HAL_GPIO_ReadPin(sensor->GPIO_Port,sensor->GPIO_Pin)== (GPIO_PinState) state){
 8001fe8:	e00a      	b.n	8002000 <DHT_PORT_ExpectPulse+0x40>
		if (_count++ >= _maxcycles){
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	60fa      	str	r2, [r7, #12]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d804      	bhi.n	8002000 <DHT_PORT_ExpectPulse+0x40>
			_count = COUNT_TIMEOUT;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffa:	60fb      	str	r3, [r7, #12]
			return _count;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	e00e      	b.n	800201e <DHT_PORT_ExpectPulse+0x5e>
	while (HAL_GPIO_ReadPin(sensor->GPIO_Port,sensor->GPIO_Pin)== (GPIO_PinState) state){
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	b29b      	uxth	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	4610      	mov	r0, r2
 800200e:	f000 fc95 	bl	800293c <HAL_GPIO_ReadPin>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	4293      	cmp	r3, r2
 800201a:	d0e6      	beq.n	8001fea <DHT_PORT_ExpectPulse+0x2a>
		}
	}

	return _count;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	431bde83 	.word	0x431bde83

0800202c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10e      	bne.n	800205a <BSP_LED_Init+0x2e>
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <BSP_LED_Init+0x94>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <BSP_LED_Init+0x94>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	6313      	str	r3, [r2, #48]	; 0x30
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <BSP_LED_Init+0x94>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	e00d      	b.n	8002076 <BSP_LED_Init+0x4a>
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <BSP_LED_Init+0x94>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <BSP_LED_Init+0x94>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <BSP_LED_Init+0x94>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <BSP_LED_Init+0x98>)
 800207a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800207e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002080:	2301      	movs	r3, #1
 8002082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002088:	2302      	movs	r3, #2
 800208a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <BSP_LED_Init+0x9c>)
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	f107 0214 	add.w	r2, r7, #20
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f000 faa2 	bl	80025e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <BSP_LED_Init+0x9c>)
 80020a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <BSP_LED_Init+0x98>)
 80020ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	f000 fc5a 	bl	800296c <HAL_GPIO_WritePin>
}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08004d14 	.word	0x08004d14
 80020c8:	20000000 	.word	0x20000000

080020cc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <BSP_LED_On+0x2c>)
 80020da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <BSP_LED_On+0x30>)
 80020e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4619      	mov	r1, r3
 80020ea:	f000 fc3f 	bl	800296c <HAL_GPIO_WritePin>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000
 80020fc:	08004d14 	.word	0x08004d14

08002100 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	460a      	mov	r2, r1
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	4613      	mov	r3, r2
 800210e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <BSP_PB_Init+0xa4>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <BSP_PB_Init+0xa4>)
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <BSP_PB_Init+0xa4>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800212c:	79bb      	ldrb	r3, [r7, #6]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d112      	bne.n	8002158 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002136:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800213c:	2302      	movs	r3, #2
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <BSP_PB_Init+0xa8>)
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	f107 020c 	add.w	r2, r7, #12
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fa46 	bl	80025e4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002158:	79bb      	ldrb	r3, [r7, #6]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d11d      	bne.n	800219a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800215e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002162:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8002168:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800216c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <BSP_PB_Init+0xa8>)
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	f107 020c 	add.w	r2, r7, #12
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fa31 	bl	80025e4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002182:	2328      	movs	r3, #40	; 0x28
 8002184:	b25b      	sxtb	r3, r3
 8002186:	2200      	movs	r2, #0
 8002188:	210f      	movs	r1, #15
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f9f3 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002190:	2328      	movs	r3, #40	; 0x28
 8002192:	b25b      	sxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fa0a 	bl	80025ae <HAL_NVIC_EnableIRQ>
  }
}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	2000000c 	.word	0x2000000c

080021ac <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <BSP_PB_GetState+0x28>)
 80021ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fbb9 	bl	800293c <HAL_GPIO_ReadPin>
 80021ca:	4603      	mov	r3, r0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000000c 	.word	0x2000000c

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <SystemInit+0x60>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	4a15      	ldr	r2, [pc, #84]	; (8002238 <SystemInit+0x60>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <SystemInit+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <SystemInit+0x64>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <SystemInit+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <SystemInit+0x64>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a0e      	ldr	r2, [pc, #56]	; (800223c <SystemInit+0x64>)
 8002204:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <SystemInit+0x64>)
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <SystemInit+0x68>)
 8002212:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <SystemInit+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a08      	ldr	r2, [pc, #32]	; (800223c <SystemInit+0x64>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SystemInit+0x64>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SystemInit+0x60>)
 8002228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800222c:	609a      	str	r2, [r3, #8]
#endif
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00
 800223c:	40023800 	.word	0x40023800
 8002240:	24003010 	.word	0x24003010

08002244 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002256:	e7fe      	b.n	8002256 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800225c:	e7fe      	b.n	800225c <MemManage_Handler+0x4>

0800225e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002262:	e7fe      	b.n	8002262 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002268:	e7fe      	b.n	8002268 <UsageFault_Handler+0x4>

0800226a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8002298:	f000 f84e 	bl	8002338 <HAL_IncTick>
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_Init+0x34>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_Init+0x34>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_Init+0x34>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_Init+0x34>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 f94f 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	200f      	movs	r0, #15
 80022c4:	f000 f808 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f000 ffbf 	bl	800324a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_InitTick+0x54>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x58>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f967 	bl	80025ca <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002314:	f000 f92f 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_InitTick+0x5c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000010 	.word	0x20000010
 8002330:	20000018 	.word	0x20000018
 8002334:	20000014 	.word	0x20000014

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000018 	.word	0x20000018
 800235c:	200000d4 	.word	0x200000d4

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	200000d4 	.word	0x200000d4

08002378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff ffee 	bl	8002360 <HAL_GetTick>
 8002384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002390:	d005      	beq.n	800239e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_Delay+0x44>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800239e:	bf00      	nop
 80023a0:	f7ff ffde 	bl	8002360 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8f7      	bhi.n	80023a0 <HAL_Delay+0x28>
  {
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000018 	.word	0x20000018

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff3e 	bl	8002408 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff8e 	bl	80024b4 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5d 	bl	8002460 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff31 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa2 	bl	800251c <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e177      	b.n	80028f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8166 	bne.w	80028ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80c0 	beq.w	80028ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_GPIO_Init+0x324>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_GPIO_Init+0x324>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b63      	ldr	r3, [pc, #396]	; (8002908 <HAL_GPIO_Init+0x324>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a61      	ldr	r2, [pc, #388]	; (800290c <HAL_GPIO_Init+0x328>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_GPIO_Init+0x32c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d037      	beq.n	8002822 <HAL_GPIO_Init+0x23e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a57      	ldr	r2, [pc, #348]	; (8002914 <HAL_GPIO_Init+0x330>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d031      	beq.n	800281e <HAL_GPIO_Init+0x23a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a56      	ldr	r2, [pc, #344]	; (8002918 <HAL_GPIO_Init+0x334>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d02b      	beq.n	800281a <HAL_GPIO_Init+0x236>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a55      	ldr	r2, [pc, #340]	; (800291c <HAL_GPIO_Init+0x338>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d025      	beq.n	8002816 <HAL_GPIO_Init+0x232>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a54      	ldr	r2, [pc, #336]	; (8002920 <HAL_GPIO_Init+0x33c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01f      	beq.n	8002812 <HAL_GPIO_Init+0x22e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a53      	ldr	r2, [pc, #332]	; (8002924 <HAL_GPIO_Init+0x340>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d019      	beq.n	800280e <HAL_GPIO_Init+0x22a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_GPIO_Init+0x344>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_GPIO_Init+0x226>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a51      	ldr	r2, [pc, #324]	; (800292c <HAL_GPIO_Init+0x348>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00d      	beq.n	8002806 <HAL_GPIO_Init+0x222>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a50      	ldr	r2, [pc, #320]	; (8002930 <HAL_GPIO_Init+0x34c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <HAL_GPIO_Init+0x21e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4f      	ldr	r2, [pc, #316]	; (8002934 <HAL_GPIO_Init+0x350>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_GPIO_Init+0x21a>
 80027fa:	2309      	movs	r3, #9
 80027fc:	e012      	b.n	8002824 <HAL_GPIO_Init+0x240>
 80027fe:	230a      	movs	r3, #10
 8002800:	e010      	b.n	8002824 <HAL_GPIO_Init+0x240>
 8002802:	2308      	movs	r3, #8
 8002804:	e00e      	b.n	8002824 <HAL_GPIO_Init+0x240>
 8002806:	2307      	movs	r3, #7
 8002808:	e00c      	b.n	8002824 <HAL_GPIO_Init+0x240>
 800280a:	2306      	movs	r3, #6
 800280c:	e00a      	b.n	8002824 <HAL_GPIO_Init+0x240>
 800280e:	2305      	movs	r3, #5
 8002810:	e008      	b.n	8002824 <HAL_GPIO_Init+0x240>
 8002812:	2304      	movs	r3, #4
 8002814:	e006      	b.n	8002824 <HAL_GPIO_Init+0x240>
 8002816:	2303      	movs	r3, #3
 8002818:	e004      	b.n	8002824 <HAL_GPIO_Init+0x240>
 800281a:	2302      	movs	r3, #2
 800281c:	e002      	b.n	8002824 <HAL_GPIO_Init+0x240>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_GPIO_Init+0x240>
 8002822:	2300      	movs	r3, #0
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f002 0203 	and.w	r2, r2, #3
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	4093      	lsls	r3, r2
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002834:	4935      	ldr	r1, [pc, #212]	; (800290c <HAL_GPIO_Init+0x328>)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	3302      	adds	r3, #2
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_GPIO_Init+0x354>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002866:	4a34      	ldr	r2, [pc, #208]	; (8002938 <HAL_GPIO_Init+0x354>)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_GPIO_Init+0x354>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002890:	4a29      	ldr	r2, [pc, #164]	; (8002938 <HAL_GPIO_Init+0x354>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b28      	ldr	r3, [pc, #160]	; (8002938 <HAL_GPIO_Init+0x354>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ba:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HAL_GPIO_Init+0x354>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_GPIO_Init+0x354>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_GPIO_Init+0x354>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	f67f ae84 	bls.w	8002600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40013800 	.word	0x40013800
 8002910:	40020000 	.word	0x40020000
 8002914:	40020400 	.word	0x40020400
 8002918:	40020800 	.word	0x40020800
 800291c:	40020c00 	.word	0x40020c00
 8002920:	40021000 	.word	0x40021000
 8002924:	40021400 	.word	0x40021400
 8002928:	40021800 	.word	0x40021800
 800292c:	40021c00 	.word	0x40021c00
 8002930:	40022000 	.word	0x40022000
 8002934:	40022400 	.word	0x40022400
 8002938:	40013c00 	.word	0x40013c00

0800293c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	e001      	b.n	800295e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
 8002978:	4613      	mov	r3, r2
 800297a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800297c:	787b      	ldrb	r3, [r7, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002988:	e003      	b.n	8002992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	041a      	lsls	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	619a      	str	r2, [r3, #24]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e12b      	b.n	8002c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f92e 	bl	8002c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a04:	f001 f8e8 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 8002a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a81      	ldr	r2, [pc, #516]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d807      	bhi.n	8002a24 <HAL_I2C_Init+0x84>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a80      	ldr	r2, [pc, #512]	; (8002c18 <HAL_I2C_Init+0x278>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bf94      	ite	ls
 8002a1c:	2301      	movls	r3, #1
 8002a1e:	2300      	movhi	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e006      	b.n	8002a32 <HAL_I2C_Init+0x92>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a7d      	ldr	r2, [pc, #500]	; (8002c1c <HAL_I2C_Init+0x27c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0e7      	b.n	8002c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a78      	ldr	r2, [pc, #480]	; (8002c20 <HAL_I2C_Init+0x280>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0c9b      	lsrs	r3, r3, #18
 8002a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d802      	bhi.n	8002a74 <HAL_I2C_Init+0xd4>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3301      	adds	r3, #1
 8002a72:	e009      	b.n	8002a88 <HAL_I2C_Init+0xe8>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	4a69      	ldr	r2, [pc, #420]	; (8002c24 <HAL_I2C_Init+0x284>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	3301      	adds	r3, #1
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	495c      	ldr	r1, [pc, #368]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	d819      	bhi.n	8002adc <HAL_I2C_Init+0x13c>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1e59      	subs	r1, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab6:	1c59      	adds	r1, r3, #1
 8002ab8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002abc:	400b      	ands	r3, r1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_I2C_Init+0x138>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e59      	subs	r1, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad6:	e051      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e04f      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d111      	bne.n	8002b08 <HAL_I2C_Init+0x168>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	440b      	add	r3, r1
 8002af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e012      	b.n	8002b2e <HAL_I2C_Init+0x18e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	0099      	lsls	r1, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Init+0x196>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e022      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10e      	bne.n	8002b5c <HAL_I2C_Init+0x1bc>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e58      	subs	r0, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	440b      	add	r3, r1
 8002b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5a:	e00f      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	6809      	ldr	r1, [r1, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6911      	ldr	r1, [r2, #16]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68d2      	ldr	r2, [r2, #12]
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	000186a0 	.word	0x000186a0
 8002c18:	001e847f 	.word	0x001e847f
 8002c1c:	003d08ff 	.word	0x003d08ff
 8002c20:	431bde83 	.word	0x431bde83
 8002c24:	10624dd3 	.word	0x10624dd3

08002c28 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	460b      	mov	r3, r1
 8002c4a:	817b      	strh	r3, [r7, #10]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff fb86 	bl	8002360 <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	f040 80e0 	bne.w	8002e24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2319      	movs	r3, #25
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4970      	ldr	r1, [pc, #448]	; (8002e30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f964 	bl	8002f3c <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0d3      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0x50>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0cc      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d007      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2221      	movs	r2, #33	; 0x21
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	893a      	ldrh	r2, [r7, #8]
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	6a3a      	ldr	r2, [r7, #32]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f89c 	bl	8002e38 <I2C_MasterRequestWrite>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e08d      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d20:	e066      	b.n	8002df0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6a39      	ldr	r1, [r7, #32]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f9de 	bl	80030e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d107      	bne.n	8002d4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e06b      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0x188>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d017      	beq.n	8002dc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	6a39      	ldr	r1, [r7, #32]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f9ce 	bl	800316a <I2C_WaitOnBTFFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00d      	beq.n	8002df0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d107      	bne.n	8002dec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e01a      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d194      	bne.n	8002d22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e000      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	00100002 	.word	0x00100002
 8002e34:	ffff0000 	.word	0xffff0000

08002e38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	460b      	mov	r3, r1
 8002e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d006      	beq.n	8002e62 <I2C_MasterRequestWrite+0x2a>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d003      	beq.n	8002e62 <I2C_MasterRequestWrite+0x2a>
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e60:	d108      	bne.n	8002e74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e00b      	b.n	8002e8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	d107      	bne.n	8002e8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f84f 	bl	8002f3c <I2C_WaitOnFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb2:	d103      	bne.n	8002ebc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e035      	b.n	8002f2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec8:	d108      	bne.n	8002edc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eca:	897b      	ldrh	r3, [r7, #10]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	e01b      	b.n	8002f14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	11db      	asrs	r3, r3, #7
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f003 0306 	and.w	r3, r3, #6
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f063 030f 	orn	r3, r3, #15
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <I2C_MasterRequestWrite+0xfc>)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f875 	bl	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e010      	b.n	8002f2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4907      	ldr	r1, [pc, #28]	; (8002f38 <I2C_MasterRequestWrite+0x100>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f865 	bl	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	00010008 	.word	0x00010008
 8002f38:	00010002 	.word	0x00010002

08002f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4c:	e025      	b.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f54:	d021      	beq.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7ff fa03 	bl	8002360 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d116      	bne.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e023      	b.n	8002fe2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10d      	bne.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	e00c      	b.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d0b6      	beq.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ff8:	e051      	b.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d123      	bne.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003018:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003022:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f043 0204 	orr.w	r2, r3, #4
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e046      	b.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003058:	d021      	beq.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7ff f981 	bl	8002360 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d116      	bne.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f043 0220 	orr.w	r2, r3, #32
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e020      	b.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d10c      	bne.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e00b      	b.n	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	43da      	mvns	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d18d      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f4:	e02d      	b.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f878 	bl	80031ec <I2C_IsAcknowledgeFailed>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e02d      	b.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310c:	d021      	beq.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310e:	f7ff f927 	bl	8002360 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	d302      	bcc.n	8003124 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d116      	bne.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e007      	b.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d1ca      	bne.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003176:	e02d      	b.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f837 	bl	80031ec <I2C_IsAcknowledgeFailed>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e02d      	b.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318e:	d021      	beq.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003190:	f7ff f8e6 	bl	8002360 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	d302      	bcc.n	80031a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d116      	bne.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e007      	b.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d1ca      	bne.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003202:	d11b      	bne.n	800323c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800320c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f043 0204 	orr.w	r2, r3, #4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0

}
 800324e:	bf00      	nop
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	; 0x40
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_PWREx_EnableOverDrive+0x94>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003284:	f7ff f86c 	bl	8002360 <HAL_GetTick>
 8003288:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800328a:	e009      	b.n	80032a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800328c:	f7ff f868 	bl	8002360 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329a:	d901      	bls.n	80032a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e01f      	b.n	80032e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d1ee      	bne.n	800328c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032ae:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b4:	f7ff f854 	bl	8002360 <HAL_GetTick>
 80032b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ba:	e009      	b.n	80032d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032bc:	f7ff f850 	bl	8002360 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ca:	d901      	bls.n	80032d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e007      	b.n	80032e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032dc:	d1ee      	bne.n	80032bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40023800 	.word	0x40023800
 80032ec:	420e0040 	.word	0x420e0040
 80032f0:	40007000 	.word	0x40007000
 80032f4:	420e0044 	.word	0x420e0044

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e267      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d075      	beq.n	8003402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d00c      	beq.n	800333c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332a:	2b08      	cmp	r3, #8
 800332c:	d112      	bne.n	8003354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332e:	4b82      	ldr	r3, [pc, #520]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333a:	d10b      	bne.n	8003354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	4b7e      	ldr	r3, [pc, #504]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d05b      	beq.n	8003400 <HAL_RCC_OscConfig+0x108>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d157      	bne.n	8003400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e242      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x74>
 800335e:	4b76      	ldr	r3, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a75      	ldr	r2, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e01d      	b.n	80033a8 <HAL_RCC_OscConfig+0xb0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x98>
 8003376:	4b70      	ldr	r3, [pc, #448]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6f      	ldr	r2, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800337c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b6d      	ldr	r3, [pc, #436]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6c      	ldr	r2, [pc, #432]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xb0>
 8003390:	4b69      	ldr	r3, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a68      	ldr	r2, [pc, #416]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b66      	ldr	r3, [pc, #408]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a65      	ldr	r2, [pc, #404]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe ffd6 	bl	8002360 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe ffd2 	bl	8002360 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e207      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0xc0>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe ffc2 	bl	8002360 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe ffbe 	bl	8002360 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1f3      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	4b51      	ldr	r3, [pc, #324]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0xe8>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003422:	2b08      	cmp	r3, #8
 8003424:	d11c      	bne.n	8003460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003426:	4b44      	ldr	r3, [pc, #272]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x152>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e1c7      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4937      	ldr	r1, [pc, #220]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	e03a      	b.n	80034d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003468:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCC_OscConfig+0x244>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fe ff77 	bl	8002360 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003476:	f7fe ff73 	bl	8002360 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1a8      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4925      	ldr	r1, [pc, #148]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]
 80034a8:	e015      	b.n	80034d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_OscConfig+0x244>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe ff56 	bl	8002360 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe ff52 	bl	8002360 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e187      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d036      	beq.n	8003550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_RCC_OscConfig+0x248>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe ff36 	bl	8002360 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fe ff32 	bl	8002360 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e167      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800350c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x200>
 8003516:	e01b      	b.n	8003550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x248>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe ff1f 	bl	8002360 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	e00e      	b.n	8003544 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003526:	f7fe ff1b 	bl	8002360 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d907      	bls.n	8003544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e150      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
 8003538:	40023800 	.word	0x40023800
 800353c:	42470000 	.word	0x42470000
 8003540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ea      	bne.n	8003526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8097 	beq.w	800368c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003562:	4b81      	ldr	r3, [pc, #516]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	4b7d      	ldr	r3, [pc, #500]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a7c      	ldr	r2, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b77      	ldr	r3, [pc, #476]	; (800376c <HAL_RCC_OscConfig+0x474>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b74      	ldr	r3, [pc, #464]	; (800376c <HAL_RCC_OscConfig+0x474>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a73      	ldr	r2, [pc, #460]	; (800376c <HAL_RCC_OscConfig+0x474>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe fedb 	bl	8002360 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe fed7 	bl	8002360 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e10c      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCC_OscConfig+0x474>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x2ea>
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a63      	ldr	r2, [pc, #396]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e01c      	b.n	800361c <HAL_RCC_OscConfig+0x324>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x30c>
 80035ea:	4b5f      	ldr	r3, [pc, #380]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a5b      	ldr	r2, [pc, #364]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	e00b      	b.n	800361c <HAL_RCC_OscConfig+0x324>
 8003604:	4b58      	ldr	r3, [pc, #352]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a57      	ldr	r2, [pc, #348]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a54      	ldr	r2, [pc, #336]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe fe9c 	bl	8002360 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe fe98 	bl	8002360 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0cb      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	4b49      	ldr	r3, [pc, #292]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <HAL_RCC_OscConfig+0x334>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003650:	f7fe fe86 	bl	8002360 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fe fe82 	bl	8002360 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0b5      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366e:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ee      	bne.n	8003658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a38      	ldr	r2, [pc, #224]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a1 	beq.w	80037d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003696:	4b34      	ldr	r3, [pc, #208]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d05c      	beq.n	800375c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d141      	bne.n	800372e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fe56 	bl	8002360 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fe52 	bl	8002360 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e087      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	491b      	ldr	r1, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fe fe2b 	bl	8002360 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe fe27 	bl	8002360 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e05c      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x416>
 800372c:	e054      	b.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fe14 	bl	8002360 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fe10 	bl	8002360 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e045      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x444>
 800375a:	e03d      	b.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e038      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
 8003768:	40023800 	.word	0x40023800
 800376c:	40007000 	.word	0x40007000
 8003770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x4ec>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d028      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d121      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d11a      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d111      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800

080037e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0cc      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b68      	ldr	r3, [pc, #416]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d90c      	bls.n	8003824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0b8      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800383c:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800385e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	494d      	ldr	r1, [pc, #308]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d044      	beq.n	8003908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d119      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e07f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e067      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4934      	ldr	r1, [pc, #208]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fe fd42 	bl	8002360 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe fd3e 	bl	8002360 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e04f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d20c      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e032      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4916      	ldr	r1, [pc, #88]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	490e      	ldr	r1, [pc, #56]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800396e:	f000 f821 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a09      	ldr	r2, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fca2 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023c00 	.word	0x40023c00
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08004d1c 	.word	0x08004d1c
 80039ac:	20000010 	.word	0x20000010
 80039b0:	20000014 	.word	0x20000014

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b094      	sub	sp, #80	; 0x50
 80039ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	647b      	str	r3, [r7, #68]	; 0x44
 80039c0:	2300      	movs	r3, #0
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c4:	2300      	movs	r3, #0
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039cc:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d00d      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x40>
 80039d8:	2b08      	cmp	r3, #8
 80039da:	f200 80e1 	bhi.w	8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x34>
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x3a>
 80039e6:	e0db      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b73      	ldr	r3, [pc, #460]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039ec:	e0db      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b73      	ldr	r3, [pc, #460]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039f2:	e0d8      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	2200      	movs	r2, #0
 8003a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1e:	2300      	movs	r3, #0
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
 8003a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a26:	4622      	mov	r2, r4
 8003a28:	462b      	mov	r3, r5
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	0159      	lsls	r1, r3, #5
 8003a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a38:	0150      	lsls	r0, r2, #5
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4621      	mov	r1, r4
 8003a40:	1a51      	subs	r1, r2, r1
 8003a42:	6139      	str	r1, [r7, #16]
 8003a44:	4629      	mov	r1, r5
 8003a46:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a58:	4659      	mov	r1, fp
 8003a5a:	018b      	lsls	r3, r1, #6
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a62:	4651      	mov	r1, sl
 8003a64:	018a      	lsls	r2, r1, #6
 8003a66:	4651      	mov	r1, sl
 8003a68:	ebb2 0801 	subs.w	r8, r2, r1
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a86:	4690      	mov	r8, r2
 8003a88:	4699      	mov	r9, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	eb18 0303 	adds.w	r3, r8, r3
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	462b      	mov	r3, r5
 8003a94:	eb49 0303 	adc.w	r3, r9, r3
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	024b      	lsls	r3, r1, #9
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	024a      	lsls	r2, r1, #9
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aba:	2200      	movs	r2, #0
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ac4:	f7fd f850 	bl	8000b68 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad0:	e058      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	4611      	mov	r1, r2
 8003ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aec:	4642      	mov	r2, r8
 8003aee:	464b      	mov	r3, r9
 8003af0:	f04f 0000 	mov.w	r0, #0
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	0159      	lsls	r1, r3, #5
 8003afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afe:	0150      	lsls	r0, r2, #5
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4641      	mov	r1, r8
 8003b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b24:	ebb2 040a 	subs.w	r4, r2, sl
 8003b28:	eb63 050b 	sbc.w	r5, r3, fp
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	00eb      	lsls	r3, r5, #3
 8003b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3a:	00e2      	lsls	r2, r4, #3
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	461d      	mov	r5, r3
 8003b40:	4643      	mov	r3, r8
 8003b42:	18e3      	adds	r3, r4, r3
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	464b      	mov	r3, r9
 8003b48:	eb45 0303 	adc.w	r3, r5, r3
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b64:	4621      	mov	r1, r4
 8003b66:	028a      	lsls	r2, r1, #10
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	61fa      	str	r2, [r7, #28]
 8003b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b78:	f7fc fff6 	bl	8000b68 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3750      	adds	r7, #80	; 0x50
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	007a1200 	.word	0x007a1200

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000010 	.word	0x20000010

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bdc:	f7ff fff0 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08004d2c 	.word	0x08004d2c

08003c00 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8003c06:	f7fe fb4b 	bl	80022a0 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003c0a:	f000 f815 	bl	8003c38 <SystemClock_Config>

	/* Inicialización de LEDs de BSP */
	BSP_LED_Init(LED1);
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f7fe fa0c 	bl	800202c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7fe fa09 	bl	800202c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8003c1a:	2002      	movs	r0, #2
 8003c1c:	f7fe fa06 	bl	800202c <BSP_LED_Init>

	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8003c20:	2100      	movs	r1, #0
 8003c22:	2000      	movs	r0, #0
 8003c24:	f7fe fa6c 	bl	8002100 <BSP_PB_Init>

	//Se inicializa el MSP para el I2C
	MX_I2C1_Init();
 8003c28:	f000 f86e 	bl	8003d08 <MX_I2C1_Init>

	API_FSM_init();
 8003c2c:	f7fd f91a 	bl	8000e64 <API_FSM_init>

	/* Infinite loop */
	while (1)
	{
		API_FSM_update();
 8003c30:	f7fd f960 	bl	8000ef4 <API_FSM_update>
 8003c34:	e7fc      	b.n	8003c30 <main+0x30>
	...

08003c38 <SystemClock_Config>:
		HAL_Delay(5000);
}


static void SystemClock_Config(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b094      	sub	sp, #80	; 0x50
 8003c3c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <SystemClock_Config+0xbc>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <SystemClock_Config+0xbc>)
 8003c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <SystemClock_Config+0xbc>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <SystemClock_Config+0xc0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <SystemClock_Config+0xc0>)
 8003c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <SystemClock_Config+0xc0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c76:	2301      	movs	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c7a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c7e:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c80:	2302      	movs	r3, #2
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003c8e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c94:	2302      	movs	r3, #2
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c98:	2307      	movs	r3, #7
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c9c:	f107 030c 	add.w	r3, r7, #12
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fb29 	bl	80032f8 <HAL_RCC_OscConfig>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8003cac:	f000 f826 	bl	8003cfc <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003cb0:	f7ff fad2 	bl	8003258 <HAL_PWREx_EnableOverDrive>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8003cba:	f000 f81f 	bl	8003cfc <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003cbe:	230f      	movs	r3, #15
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003cca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003cce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cda:	2105      	movs	r1, #5
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fd83 	bl	80037e8 <HAL_RCC_ClockConfig>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8003ce8:	f000 f808 	bl	8003cfc <Error_Handler>
	}
}
 8003cec:	bf00      	nop
 8003cee:	3750      	adds	r7, #80	; 0x50
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40007000 	.word	0x40007000

08003cfc <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8003d00:	2001      	movs	r0, #1
 8003d02:	f7fe f9e3 	bl	80020cc <BSP_LED_On>
	while (1)
 8003d06:	e7fe      	b.n	8003d06 <Error_Handler+0xa>

08003d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <MX_I2C1_Init+0xa8>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <MX_I2C1_Init+0xa8>)
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <MX_I2C1_Init+0xa8>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d30:	2312      	movs	r3, #18
 8003d32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d40:	f107 030c 	add.w	r3, r7, #12
 8003d44:	4619      	mov	r1, r3
 8003d46:	481b      	ldr	r0, [pc, #108]	; (8003db4 <MX_I2C1_Init+0xac>)
 8003d48:	f7fe fc4c 	bl	80025e4 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <MX_I2C1_Init+0xa8>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <MX_I2C1_Init+0xa8>)
 8003d56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <MX_I2C1_Init+0xa8>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]

	hi2c1.Instance = I2C1;
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d6a:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <MX_I2C1_Init+0xb4>)
 8003d6c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d70:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <MX_I2C1_Init+0xb8>)
 8003d72:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d74:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0x0;
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d86:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	621a      	str	r2, [r3, #32]

	HAL_I2C_Init(&hi2c1);
 8003da0:	4805      	ldr	r0, [pc, #20]	; (8003db8 <MX_I2C1_Init+0xb0>)
 8003da2:	f7fe fdfd 	bl	80029a0 <HAL_I2C_Init>

}
 8003da6:	bf00      	nop
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40020400 	.word	0x40020400
 8003db8:	200000f4 	.word	0x200000f4
 8003dbc:	40005400 	.word	0x40005400
 8003dc0:	000186a0 	.word	0x000186a0

08003dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dfc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dca:	e003      	b.n	8003dd4 <LoopCopyDataInit>

08003dcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003dd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dd2:	3104      	adds	r1, #4

08003dd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003dd4:	480b      	ldr	r0, [pc, #44]	; (8003e04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003dd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ddc:	d3f6      	bcc.n	8003dcc <CopyDataInit>
  ldr  r2, =_sbss
 8003dde:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003de0:	e002      	b.n	8003de8 <LoopFillZerobss>

08003de2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003de2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003de4:	f842 3b04 	str.w	r3, [r2], #4

08003de8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dec:	d3f9      	bcc.n	8003de2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dee:	f7fe f9f3 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003df2:	f000 f817 	bl	8003e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003df6:	f7ff ff03 	bl	8003c00 <main>
  bx  lr    
 8003dfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003dfc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003e00:	08004d78 	.word	0x08004d78
  ldr  r0, =_sdata
 8003e04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e08:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003e0c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003e10:	2000028c 	.word	0x2000028c

08003e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e14:	e7fe      	b.n	8003e14 <ADC_IRQHandler>
	...

08003e18 <__errno>:
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <__errno+0x8>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000068 	.word	0x20000068

08003e24 <__libc_init_array>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	4d0d      	ldr	r5, [pc, #52]	; (8003e5c <__libc_init_array+0x38>)
 8003e28:	4c0d      	ldr	r4, [pc, #52]	; (8003e60 <__libc_init_array+0x3c>)
 8003e2a:	1b64      	subs	r4, r4, r5
 8003e2c:	10a4      	asrs	r4, r4, #2
 8003e2e:	2600      	movs	r6, #0
 8003e30:	42a6      	cmp	r6, r4
 8003e32:	d109      	bne.n	8003e48 <__libc_init_array+0x24>
 8003e34:	4d0b      	ldr	r5, [pc, #44]	; (8003e64 <__libc_init_array+0x40>)
 8003e36:	4c0c      	ldr	r4, [pc, #48]	; (8003e68 <__libc_init_array+0x44>)
 8003e38:	f000 ff52 	bl	8004ce0 <_init>
 8003e3c:	1b64      	subs	r4, r4, r5
 8003e3e:	10a4      	asrs	r4, r4, #2
 8003e40:	2600      	movs	r6, #0
 8003e42:	42a6      	cmp	r6, r4
 8003e44:	d105      	bne.n	8003e52 <__libc_init_array+0x2e>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4c:	4798      	blx	r3
 8003e4e:	3601      	adds	r6, #1
 8003e50:	e7ee      	b.n	8003e30 <__libc_init_array+0xc>
 8003e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e56:	4798      	blx	r3
 8003e58:	3601      	adds	r6, #1
 8003e5a:	e7f2      	b.n	8003e42 <__libc_init_array+0x1e>
 8003e5c:	08004d70 	.word	0x08004d70
 8003e60:	08004d70 	.word	0x08004d70
 8003e64:	08004d70 	.word	0x08004d70
 8003e68:	08004d74 	.word	0x08004d74

08003e6c <pow>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	ed2d 8b02 	vpush	{d8}
 8003e72:	eeb0 8a40 	vmov.f32	s16, s0
 8003e76:	eef0 8a60 	vmov.f32	s17, s1
 8003e7a:	ec55 4b11 	vmov	r4, r5, d1
 8003e7e:	f000 f873 	bl	8003f68 <__ieee754_pow>
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	4620      	mov	r0, r4
 8003e88:	4629      	mov	r1, r5
 8003e8a:	ec57 6b10 	vmov	r6, r7, d0
 8003e8e:	f7fc fe05 	bl	8000a9c <__aeabi_dcmpun>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d13b      	bne.n	8003f0e <pow+0xa2>
 8003e96:	ec51 0b18 	vmov	r0, r1, d8
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f7fc fdcb 	bl	8000a38 <__aeabi_dcmpeq>
 8003ea2:	b1b8      	cbz	r0, 8003ed4 <pow+0x68>
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	f7fc fdc4 	bl	8000a38 <__aeabi_dcmpeq>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d146      	bne.n	8003f42 <pow+0xd6>
 8003eb4:	ec45 4b10 	vmov	d0, r4, r5
 8003eb8:	f000 f848 	bl	8003f4c <finite>
 8003ebc:	b338      	cbz	r0, 8003f0e <pow+0xa2>
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f7fc fdc1 	bl	8000a4c <__aeabi_dcmplt>
 8003eca:	b300      	cbz	r0, 8003f0e <pow+0xa2>
 8003ecc:	f7ff ffa4 	bl	8003e18 <__errno>
 8003ed0:	2322      	movs	r3, #34	; 0x22
 8003ed2:	e01b      	b.n	8003f0c <pow+0xa0>
 8003ed4:	ec47 6b10 	vmov	d0, r6, r7
 8003ed8:	f000 f838 	bl	8003f4c <finite>
 8003edc:	b9e0      	cbnz	r0, 8003f18 <pow+0xac>
 8003ede:	eeb0 0a48 	vmov.f32	s0, s16
 8003ee2:	eef0 0a68 	vmov.f32	s1, s17
 8003ee6:	f000 f831 	bl	8003f4c <finite>
 8003eea:	b1a8      	cbz	r0, 8003f18 <pow+0xac>
 8003eec:	ec45 4b10 	vmov	d0, r4, r5
 8003ef0:	f000 f82c 	bl	8003f4c <finite>
 8003ef4:	b180      	cbz	r0, 8003f18 <pow+0xac>
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	463b      	mov	r3, r7
 8003efa:	4630      	mov	r0, r6
 8003efc:	4639      	mov	r1, r7
 8003efe:	f7fc fdcd 	bl	8000a9c <__aeabi_dcmpun>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d0e2      	beq.n	8003ecc <pow+0x60>
 8003f06:	f7ff ff87 	bl	8003e18 <__errno>
 8003f0a:	2321      	movs	r3, #33	; 0x21
 8003f0c:	6003      	str	r3, [r0, #0]
 8003f0e:	ecbd 8b02 	vpop	{d8}
 8003f12:	ec47 6b10 	vmov	d0, r6, r7
 8003f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	4639      	mov	r1, r7
 8003f20:	f7fc fd8a 	bl	8000a38 <__aeabi_dcmpeq>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d0f2      	beq.n	8003f0e <pow+0xa2>
 8003f28:	eeb0 0a48 	vmov.f32	s0, s16
 8003f2c:	eef0 0a68 	vmov.f32	s1, s17
 8003f30:	f000 f80c 	bl	8003f4c <finite>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d0ea      	beq.n	8003f0e <pow+0xa2>
 8003f38:	ec45 4b10 	vmov	d0, r4, r5
 8003f3c:	f000 f806 	bl	8003f4c <finite>
 8003f40:	e7c3      	b.n	8003eca <pow+0x5e>
 8003f42:	4f01      	ldr	r7, [pc, #4]	; (8003f48 <pow+0xdc>)
 8003f44:	2600      	movs	r6, #0
 8003f46:	e7e2      	b.n	8003f0e <pow+0xa2>
 8003f48:	3ff00000 	.word	0x3ff00000

08003f4c <finite>:
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	ed8d 0b00 	vstr	d0, [sp]
 8003f52:	9801      	ldr	r0, [sp, #4]
 8003f54:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003f58:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003f5c:	0fc0      	lsrs	r0, r0, #31
 8003f5e:	b002      	add	sp, #8
 8003f60:	4770      	bx	lr
 8003f62:	0000      	movs	r0, r0
 8003f64:	0000      	movs	r0, r0
	...

08003f68 <__ieee754_pow>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	ed2d 8b06 	vpush	{d8-d10}
 8003f70:	b089      	sub	sp, #36	; 0x24
 8003f72:	ed8d 1b00 	vstr	d1, [sp]
 8003f76:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003f7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003f7e:	ea58 0102 	orrs.w	r1, r8, r2
 8003f82:	ec57 6b10 	vmov	r6, r7, d0
 8003f86:	d115      	bne.n	8003fb4 <__ieee754_pow+0x4c>
 8003f88:	19b3      	adds	r3, r6, r6
 8003f8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003f8e:	4152      	adcs	r2, r2
 8003f90:	4299      	cmp	r1, r3
 8003f92:	4b89      	ldr	r3, [pc, #548]	; (80041b8 <__ieee754_pow+0x250>)
 8003f94:	4193      	sbcs	r3, r2
 8003f96:	f080 84d1 	bcs.w	800493c <__ieee754_pow+0x9d4>
 8003f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	f7fc f92b 	bl	80001fc <__adddf3>
 8003fa6:	ec41 0b10 	vmov	d0, r0, r1
 8003faa:	b009      	add	sp, #36	; 0x24
 8003fac:	ecbd 8b06 	vpop	{d8-d10}
 8003fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb4:	4b81      	ldr	r3, [pc, #516]	; (80041bc <__ieee754_pow+0x254>)
 8003fb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	ee10 aa10 	vmov	sl, s0
 8003fc0:	463d      	mov	r5, r7
 8003fc2:	dc06      	bgt.n	8003fd2 <__ieee754_pow+0x6a>
 8003fc4:	d101      	bne.n	8003fca <__ieee754_pow+0x62>
 8003fc6:	2e00      	cmp	r6, #0
 8003fc8:	d1e7      	bne.n	8003f9a <__ieee754_pow+0x32>
 8003fca:	4598      	cmp	r8, r3
 8003fcc:	dc01      	bgt.n	8003fd2 <__ieee754_pow+0x6a>
 8003fce:	d10f      	bne.n	8003ff0 <__ieee754_pow+0x88>
 8003fd0:	b172      	cbz	r2, 8003ff0 <__ieee754_pow+0x88>
 8003fd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003fd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003fda:	ea55 050a 	orrs.w	r5, r5, sl
 8003fde:	d1dc      	bne.n	8003f9a <__ieee754_pow+0x32>
 8003fe0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003fe4:	18db      	adds	r3, r3, r3
 8003fe6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003fea:	4152      	adcs	r2, r2
 8003fec:	429d      	cmp	r5, r3
 8003fee:	e7d0      	b.n	8003f92 <__ieee754_pow+0x2a>
 8003ff0:	2d00      	cmp	r5, #0
 8003ff2:	da3b      	bge.n	800406c <__ieee754_pow+0x104>
 8003ff4:	4b72      	ldr	r3, [pc, #456]	; (80041c0 <__ieee754_pow+0x258>)
 8003ff6:	4598      	cmp	r8, r3
 8003ff8:	dc51      	bgt.n	800409e <__ieee754_pow+0x136>
 8003ffa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003ffe:	4598      	cmp	r8, r3
 8004000:	f340 84ab 	ble.w	800495a <__ieee754_pow+0x9f2>
 8004004:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004008:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800400c:	2b14      	cmp	r3, #20
 800400e:	dd0f      	ble.n	8004030 <__ieee754_pow+0xc8>
 8004010:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004014:	fa22 f103 	lsr.w	r1, r2, r3
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	4293      	cmp	r3, r2
 800401e:	f040 849c 	bne.w	800495a <__ieee754_pow+0x9f2>
 8004022:	f001 0101 	and.w	r1, r1, #1
 8004026:	f1c1 0302 	rsb	r3, r1, #2
 800402a:	9304      	str	r3, [sp, #16]
 800402c:	b182      	cbz	r2, 8004050 <__ieee754_pow+0xe8>
 800402e:	e05f      	b.n	80040f0 <__ieee754_pow+0x188>
 8004030:	2a00      	cmp	r2, #0
 8004032:	d15b      	bne.n	80040ec <__ieee754_pow+0x184>
 8004034:	f1c3 0314 	rsb	r3, r3, #20
 8004038:	fa48 f103 	asr.w	r1, r8, r3
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	4543      	cmp	r3, r8
 8004042:	f040 8487 	bne.w	8004954 <__ieee754_pow+0x9ec>
 8004046:	f001 0101 	and.w	r1, r1, #1
 800404a:	f1c1 0302 	rsb	r3, r1, #2
 800404e:	9304      	str	r3, [sp, #16]
 8004050:	4b5c      	ldr	r3, [pc, #368]	; (80041c4 <__ieee754_pow+0x25c>)
 8004052:	4598      	cmp	r8, r3
 8004054:	d132      	bne.n	80040bc <__ieee754_pow+0x154>
 8004056:	f1b9 0f00 	cmp.w	r9, #0
 800405a:	f280 8477 	bge.w	800494c <__ieee754_pow+0x9e4>
 800405e:	4959      	ldr	r1, [pc, #356]	; (80041c4 <__ieee754_pow+0x25c>)
 8004060:	4632      	mov	r2, r6
 8004062:	463b      	mov	r3, r7
 8004064:	2000      	movs	r0, #0
 8004066:	f7fc fba9 	bl	80007bc <__aeabi_ddiv>
 800406a:	e79c      	b.n	8003fa6 <__ieee754_pow+0x3e>
 800406c:	2300      	movs	r3, #0
 800406e:	9304      	str	r3, [sp, #16]
 8004070:	2a00      	cmp	r2, #0
 8004072:	d13d      	bne.n	80040f0 <__ieee754_pow+0x188>
 8004074:	4b51      	ldr	r3, [pc, #324]	; (80041bc <__ieee754_pow+0x254>)
 8004076:	4598      	cmp	r8, r3
 8004078:	d1ea      	bne.n	8004050 <__ieee754_pow+0xe8>
 800407a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800407e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004082:	ea53 030a 	orrs.w	r3, r3, sl
 8004086:	f000 8459 	beq.w	800493c <__ieee754_pow+0x9d4>
 800408a:	4b4f      	ldr	r3, [pc, #316]	; (80041c8 <__ieee754_pow+0x260>)
 800408c:	429c      	cmp	r4, r3
 800408e:	dd08      	ble.n	80040a2 <__ieee754_pow+0x13a>
 8004090:	f1b9 0f00 	cmp.w	r9, #0
 8004094:	f2c0 8456 	blt.w	8004944 <__ieee754_pow+0x9dc>
 8004098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800409c:	e783      	b.n	8003fa6 <__ieee754_pow+0x3e>
 800409e:	2302      	movs	r3, #2
 80040a0:	e7e5      	b.n	800406e <__ieee754_pow+0x106>
 80040a2:	f1b9 0f00 	cmp.w	r9, #0
 80040a6:	f04f 0000 	mov.w	r0, #0
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	f6bf af7a 	bge.w	8003fa6 <__ieee754_pow+0x3e>
 80040b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80040b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80040ba:	e774      	b.n	8003fa6 <__ieee754_pow+0x3e>
 80040bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80040c0:	d106      	bne.n	80040d0 <__ieee754_pow+0x168>
 80040c2:	4632      	mov	r2, r6
 80040c4:	463b      	mov	r3, r7
 80040c6:	4630      	mov	r0, r6
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc fa4d 	bl	8000568 <__aeabi_dmul>
 80040ce:	e76a      	b.n	8003fa6 <__ieee754_pow+0x3e>
 80040d0:	4b3e      	ldr	r3, [pc, #248]	; (80041cc <__ieee754_pow+0x264>)
 80040d2:	4599      	cmp	r9, r3
 80040d4:	d10c      	bne.n	80040f0 <__ieee754_pow+0x188>
 80040d6:	2d00      	cmp	r5, #0
 80040d8:	db0a      	blt.n	80040f0 <__ieee754_pow+0x188>
 80040da:	ec47 6b10 	vmov	d0, r6, r7
 80040de:	b009      	add	sp, #36	; 0x24
 80040e0:	ecbd 8b06 	vpop	{d8-d10}
 80040e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e8:	f000 bd20 	b.w	8004b2c <__ieee754_sqrt>
 80040ec:	2300      	movs	r3, #0
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	ec47 6b10 	vmov	d0, r6, r7
 80040f4:	f000 fc62 	bl	80049bc <fabs>
 80040f8:	ec51 0b10 	vmov	r0, r1, d0
 80040fc:	f1ba 0f00 	cmp.w	sl, #0
 8004100:	d129      	bne.n	8004156 <__ieee754_pow+0x1ee>
 8004102:	b124      	cbz	r4, 800410e <__ieee754_pow+0x1a6>
 8004104:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <__ieee754_pow+0x25c>)
 8004106:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800410a:	429a      	cmp	r2, r3
 800410c:	d123      	bne.n	8004156 <__ieee754_pow+0x1ee>
 800410e:	f1b9 0f00 	cmp.w	r9, #0
 8004112:	da05      	bge.n	8004120 <__ieee754_pow+0x1b8>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	2000      	movs	r0, #0
 800411a:	492a      	ldr	r1, [pc, #168]	; (80041c4 <__ieee754_pow+0x25c>)
 800411c:	f7fc fb4e 	bl	80007bc <__aeabi_ddiv>
 8004120:	2d00      	cmp	r5, #0
 8004122:	f6bf af40 	bge.w	8003fa6 <__ieee754_pow+0x3e>
 8004126:	9b04      	ldr	r3, [sp, #16]
 8004128:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800412c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004130:	431c      	orrs	r4, r3
 8004132:	d108      	bne.n	8004146 <__ieee754_pow+0x1de>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	f7fc f85c 	bl	80001f8 <__aeabi_dsub>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	e78f      	b.n	8004066 <__ieee754_pow+0xfe>
 8004146:	9b04      	ldr	r3, [sp, #16]
 8004148:	2b01      	cmp	r3, #1
 800414a:	f47f af2c 	bne.w	8003fa6 <__ieee754_pow+0x3e>
 800414e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004152:	4619      	mov	r1, r3
 8004154:	e727      	b.n	8003fa6 <__ieee754_pow+0x3e>
 8004156:	0feb      	lsrs	r3, r5, #31
 8004158:	3b01      	subs	r3, #1
 800415a:	9306      	str	r3, [sp, #24]
 800415c:	9a06      	ldr	r2, [sp, #24]
 800415e:	9b04      	ldr	r3, [sp, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	d102      	bne.n	800416a <__ieee754_pow+0x202>
 8004164:	4632      	mov	r2, r6
 8004166:	463b      	mov	r3, r7
 8004168:	e7e6      	b.n	8004138 <__ieee754_pow+0x1d0>
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <__ieee754_pow+0x268>)
 800416c:	4598      	cmp	r8, r3
 800416e:	f340 80fb 	ble.w	8004368 <__ieee754_pow+0x400>
 8004172:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004176:	4598      	cmp	r8, r3
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <__ieee754_pow+0x260>)
 800417a:	dd0c      	ble.n	8004196 <__ieee754_pow+0x22e>
 800417c:	429c      	cmp	r4, r3
 800417e:	dc0f      	bgt.n	80041a0 <__ieee754_pow+0x238>
 8004180:	f1b9 0f00 	cmp.w	r9, #0
 8004184:	da0f      	bge.n	80041a6 <__ieee754_pow+0x23e>
 8004186:	2000      	movs	r0, #0
 8004188:	b009      	add	sp, #36	; 0x24
 800418a:	ecbd 8b06 	vpop	{d8-d10}
 800418e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004192:	f000 bcc2 	b.w	8004b1a <__math_oflow>
 8004196:	429c      	cmp	r4, r3
 8004198:	dbf2      	blt.n	8004180 <__ieee754_pow+0x218>
 800419a:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <__ieee754_pow+0x25c>)
 800419c:	429c      	cmp	r4, r3
 800419e:	dd19      	ble.n	80041d4 <__ieee754_pow+0x26c>
 80041a0:	f1b9 0f00 	cmp.w	r9, #0
 80041a4:	dcef      	bgt.n	8004186 <__ieee754_pow+0x21e>
 80041a6:	2000      	movs	r0, #0
 80041a8:	b009      	add	sp, #36	; 0x24
 80041aa:	ecbd 8b06 	vpop	{d8-d10}
 80041ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b2:	f000 bca9 	b.w	8004b08 <__math_uflow>
 80041b6:	bf00      	nop
 80041b8:	fff00000 	.word	0xfff00000
 80041bc:	7ff00000 	.word	0x7ff00000
 80041c0:	433fffff 	.word	0x433fffff
 80041c4:	3ff00000 	.word	0x3ff00000
 80041c8:	3fefffff 	.word	0x3fefffff
 80041cc:	3fe00000 	.word	0x3fe00000
 80041d0:	41e00000 	.word	0x41e00000
 80041d4:	4b60      	ldr	r3, [pc, #384]	; (8004358 <__ieee754_pow+0x3f0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	f7fc f80e 	bl	80001f8 <__aeabi_dsub>
 80041dc:	a354      	add	r3, pc, #336	; (adr r3, 8004330 <__ieee754_pow+0x3c8>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	4604      	mov	r4, r0
 80041e4:	460d      	mov	r5, r1
 80041e6:	f7fc f9bf 	bl	8000568 <__aeabi_dmul>
 80041ea:	a353      	add	r3, pc, #332	; (adr r3, 8004338 <__ieee754_pow+0x3d0>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	4606      	mov	r6, r0
 80041f2:	460f      	mov	r7, r1
 80041f4:	4620      	mov	r0, r4
 80041f6:	4629      	mov	r1, r5
 80041f8:	f7fc f9b6 	bl	8000568 <__aeabi_dmul>
 80041fc:	4b57      	ldr	r3, [pc, #348]	; (800435c <__ieee754_pow+0x3f4>)
 80041fe:	4682      	mov	sl, r0
 8004200:	468b      	mov	fp, r1
 8004202:	2200      	movs	r2, #0
 8004204:	4620      	mov	r0, r4
 8004206:	4629      	mov	r1, r5
 8004208:	f7fc f9ae 	bl	8000568 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	a14b      	add	r1, pc, #300	; (adr r1, 8004340 <__ieee754_pow+0x3d8>)
 8004212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004216:	f7fb ffef 	bl	80001f8 <__aeabi_dsub>
 800421a:	4622      	mov	r2, r4
 800421c:	462b      	mov	r3, r5
 800421e:	f7fc f9a3 	bl	8000568 <__aeabi_dmul>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	2000      	movs	r0, #0
 8004228:	494d      	ldr	r1, [pc, #308]	; (8004360 <__ieee754_pow+0x3f8>)
 800422a:	f7fb ffe5 	bl	80001f8 <__aeabi_dsub>
 800422e:	4622      	mov	r2, r4
 8004230:	4680      	mov	r8, r0
 8004232:	4689      	mov	r9, r1
 8004234:	462b      	mov	r3, r5
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	f7fc f995 	bl	8000568 <__aeabi_dmul>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fc f98f 	bl	8000568 <__aeabi_dmul>
 800424a:	a33f      	add	r3, pc, #252	; (adr r3, 8004348 <__ieee754_pow+0x3e0>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f7fc f98a 	bl	8000568 <__aeabi_dmul>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4650      	mov	r0, sl
 800425a:	4659      	mov	r1, fp
 800425c:	f7fb ffcc 	bl	80001f8 <__aeabi_dsub>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4680      	mov	r8, r0
 8004266:	4689      	mov	r9, r1
 8004268:	4630      	mov	r0, r6
 800426a:	4639      	mov	r1, r7
 800426c:	f7fb ffc6 	bl	80001fc <__adddf3>
 8004270:	2000      	movs	r0, #0
 8004272:	4632      	mov	r2, r6
 8004274:	463b      	mov	r3, r7
 8004276:	4604      	mov	r4, r0
 8004278:	460d      	mov	r5, r1
 800427a:	f7fb ffbd 	bl	80001f8 <__aeabi_dsub>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	f7fb ffb7 	bl	80001f8 <__aeabi_dsub>
 800428a:	9b04      	ldr	r3, [sp, #16]
 800428c:	9a06      	ldr	r2, [sp, #24]
 800428e:	3b01      	subs	r3, #1
 8004290:	4313      	orrs	r3, r2
 8004292:	4682      	mov	sl, r0
 8004294:	468b      	mov	fp, r1
 8004296:	f040 81e7 	bne.w	8004668 <__ieee754_pow+0x700>
 800429a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004350 <__ieee754_pow+0x3e8>
 800429e:	eeb0 8a47 	vmov.f32	s16, s14
 80042a2:	eef0 8a67 	vmov.f32	s17, s15
 80042a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80042aa:	2600      	movs	r6, #0
 80042ac:	4632      	mov	r2, r6
 80042ae:	463b      	mov	r3, r7
 80042b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042b4:	f7fb ffa0 	bl	80001f8 <__aeabi_dsub>
 80042b8:	4622      	mov	r2, r4
 80042ba:	462b      	mov	r3, r5
 80042bc:	f7fc f954 	bl	8000568 <__aeabi_dmul>
 80042c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042c4:	4680      	mov	r8, r0
 80042c6:	4689      	mov	r9, r1
 80042c8:	4650      	mov	r0, sl
 80042ca:	4659      	mov	r1, fp
 80042cc:	f7fc f94c 	bl	8000568 <__aeabi_dmul>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4640      	mov	r0, r8
 80042d6:	4649      	mov	r1, r9
 80042d8:	f7fb ff90 	bl	80001fc <__adddf3>
 80042dc:	4632      	mov	r2, r6
 80042de:	463b      	mov	r3, r7
 80042e0:	4680      	mov	r8, r0
 80042e2:	4689      	mov	r9, r1
 80042e4:	4620      	mov	r0, r4
 80042e6:	4629      	mov	r1, r5
 80042e8:	f7fc f93e 	bl	8000568 <__aeabi_dmul>
 80042ec:	460b      	mov	r3, r1
 80042ee:	4604      	mov	r4, r0
 80042f0:	460d      	mov	r5, r1
 80042f2:	4602      	mov	r2, r0
 80042f4:	4649      	mov	r1, r9
 80042f6:	4640      	mov	r0, r8
 80042f8:	f7fb ff80 	bl	80001fc <__adddf3>
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <__ieee754_pow+0x3fc>)
 80042fe:	4299      	cmp	r1, r3
 8004300:	ec45 4b19 	vmov	d9, r4, r5
 8004304:	4606      	mov	r6, r0
 8004306:	460f      	mov	r7, r1
 8004308:	468b      	mov	fp, r1
 800430a:	f340 82f0 	ble.w	80048ee <__ieee754_pow+0x986>
 800430e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004312:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004316:	4303      	orrs	r3, r0
 8004318:	f000 81e4 	beq.w	80046e4 <__ieee754_pow+0x77c>
 800431c:	ec51 0b18 	vmov	r0, r1, d8
 8004320:	2200      	movs	r2, #0
 8004322:	2300      	movs	r3, #0
 8004324:	f7fc fb92 	bl	8000a4c <__aeabi_dcmplt>
 8004328:	3800      	subs	r0, #0
 800432a:	bf18      	it	ne
 800432c:	2001      	movne	r0, #1
 800432e:	e72b      	b.n	8004188 <__ieee754_pow+0x220>
 8004330:	60000000 	.word	0x60000000
 8004334:	3ff71547 	.word	0x3ff71547
 8004338:	f85ddf44 	.word	0xf85ddf44
 800433c:	3e54ae0b 	.word	0x3e54ae0b
 8004340:	55555555 	.word	0x55555555
 8004344:	3fd55555 	.word	0x3fd55555
 8004348:	652b82fe 	.word	0x652b82fe
 800434c:	3ff71547 	.word	0x3ff71547
 8004350:	00000000 	.word	0x00000000
 8004354:	bff00000 	.word	0xbff00000
 8004358:	3ff00000 	.word	0x3ff00000
 800435c:	3fd00000 	.word	0x3fd00000
 8004360:	3fe00000 	.word	0x3fe00000
 8004364:	408fffff 	.word	0x408fffff
 8004368:	4bd5      	ldr	r3, [pc, #852]	; (80046c0 <__ieee754_pow+0x758>)
 800436a:	402b      	ands	r3, r5
 800436c:	2200      	movs	r2, #0
 800436e:	b92b      	cbnz	r3, 800437c <__ieee754_pow+0x414>
 8004370:	4bd4      	ldr	r3, [pc, #848]	; (80046c4 <__ieee754_pow+0x75c>)
 8004372:	f7fc f8f9 	bl	8000568 <__aeabi_dmul>
 8004376:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800437a:	460c      	mov	r4, r1
 800437c:	1523      	asrs	r3, r4, #20
 800437e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004382:	4413      	add	r3, r2
 8004384:	9305      	str	r3, [sp, #20]
 8004386:	4bd0      	ldr	r3, [pc, #832]	; (80046c8 <__ieee754_pow+0x760>)
 8004388:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800438c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004390:	429c      	cmp	r4, r3
 8004392:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004396:	dd08      	ble.n	80043aa <__ieee754_pow+0x442>
 8004398:	4bcc      	ldr	r3, [pc, #816]	; (80046cc <__ieee754_pow+0x764>)
 800439a:	429c      	cmp	r4, r3
 800439c:	f340 8162 	ble.w	8004664 <__ieee754_pow+0x6fc>
 80043a0:	9b05      	ldr	r3, [sp, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	9305      	str	r3, [sp, #20]
 80043a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80043aa:	2400      	movs	r4, #0
 80043ac:	00e3      	lsls	r3, r4, #3
 80043ae:	9307      	str	r3, [sp, #28]
 80043b0:	4bc7      	ldr	r3, [pc, #796]	; (80046d0 <__ieee754_pow+0x768>)
 80043b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043b6:	ed93 7b00 	vldr	d7, [r3]
 80043ba:	4629      	mov	r1, r5
 80043bc:	ec53 2b17 	vmov	r2, r3, d7
 80043c0:	eeb0 9a47 	vmov.f32	s18, s14
 80043c4:	eef0 9a67 	vmov.f32	s19, s15
 80043c8:	4682      	mov	sl, r0
 80043ca:	f7fb ff15 	bl	80001f8 <__aeabi_dsub>
 80043ce:	4652      	mov	r2, sl
 80043d0:	4606      	mov	r6, r0
 80043d2:	460f      	mov	r7, r1
 80043d4:	462b      	mov	r3, r5
 80043d6:	ec51 0b19 	vmov	r0, r1, d9
 80043da:	f7fb ff0f 	bl	80001fc <__adddf3>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	2000      	movs	r0, #0
 80043e4:	49bb      	ldr	r1, [pc, #748]	; (80046d4 <__ieee754_pow+0x76c>)
 80043e6:	f7fc f9e9 	bl	80007bc <__aeabi_ddiv>
 80043ea:	ec41 0b1a 	vmov	d10, r0, r1
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4630      	mov	r0, r6
 80043f4:	4639      	mov	r1, r7
 80043f6:	f7fc f8b7 	bl	8000568 <__aeabi_dmul>
 80043fa:	2300      	movs	r3, #0
 80043fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004400:	9302      	str	r3, [sp, #8]
 8004402:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004406:	46ab      	mov	fp, r5
 8004408:	106d      	asrs	r5, r5, #1
 800440a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800440e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004412:	ec41 0b18 	vmov	d8, r0, r1
 8004416:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800441a:	2200      	movs	r2, #0
 800441c:	4640      	mov	r0, r8
 800441e:	4649      	mov	r1, r9
 8004420:	4614      	mov	r4, r2
 8004422:	461d      	mov	r5, r3
 8004424:	f7fc f8a0 	bl	8000568 <__aeabi_dmul>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4630      	mov	r0, r6
 800442e:	4639      	mov	r1, r7
 8004430:	f7fb fee2 	bl	80001f8 <__aeabi_dsub>
 8004434:	ec53 2b19 	vmov	r2, r3, d9
 8004438:	4606      	mov	r6, r0
 800443a:	460f      	mov	r7, r1
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fb feda 	bl	80001f8 <__aeabi_dsub>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4650      	mov	r0, sl
 800444a:	4659      	mov	r1, fp
 800444c:	f7fb fed4 	bl	80001f8 <__aeabi_dsub>
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	f7fc f888 	bl	8000568 <__aeabi_dmul>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4630      	mov	r0, r6
 800445e:	4639      	mov	r1, r7
 8004460:	f7fb feca 	bl	80001f8 <__aeabi_dsub>
 8004464:	ec53 2b1a 	vmov	r2, r3, d10
 8004468:	f7fc f87e 	bl	8000568 <__aeabi_dmul>
 800446c:	ec53 2b18 	vmov	r2, r3, d8
 8004470:	ec41 0b19 	vmov	d9, r0, r1
 8004474:	ec51 0b18 	vmov	r0, r1, d8
 8004478:	f7fc f876 	bl	8000568 <__aeabi_dmul>
 800447c:	a37c      	add	r3, pc, #496	; (adr r3, 8004670 <__ieee754_pow+0x708>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	4604      	mov	r4, r0
 8004484:	460d      	mov	r5, r1
 8004486:	f7fc f86f 	bl	8000568 <__aeabi_dmul>
 800448a:	a37b      	add	r3, pc, #492	; (adr r3, 8004678 <__ieee754_pow+0x710>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fb feb4 	bl	80001fc <__adddf3>
 8004494:	4622      	mov	r2, r4
 8004496:	462b      	mov	r3, r5
 8004498:	f7fc f866 	bl	8000568 <__aeabi_dmul>
 800449c:	a378      	add	r3, pc, #480	; (adr r3, 8004680 <__ieee754_pow+0x718>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fb feab 	bl	80001fc <__adddf3>
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	f7fc f85d 	bl	8000568 <__aeabi_dmul>
 80044ae:	a376      	add	r3, pc, #472	; (adr r3, 8004688 <__ieee754_pow+0x720>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f7fb fea2 	bl	80001fc <__adddf3>
 80044b8:	4622      	mov	r2, r4
 80044ba:	462b      	mov	r3, r5
 80044bc:	f7fc f854 	bl	8000568 <__aeabi_dmul>
 80044c0:	a373      	add	r3, pc, #460	; (adr r3, 8004690 <__ieee754_pow+0x728>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f7fb fe99 	bl	80001fc <__adddf3>
 80044ca:	4622      	mov	r2, r4
 80044cc:	462b      	mov	r3, r5
 80044ce:	f7fc f84b 	bl	8000568 <__aeabi_dmul>
 80044d2:	a371      	add	r3, pc, #452	; (adr r3, 8004698 <__ieee754_pow+0x730>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fb fe90 	bl	80001fc <__adddf3>
 80044dc:	4622      	mov	r2, r4
 80044de:	4606      	mov	r6, r0
 80044e0:	460f      	mov	r7, r1
 80044e2:	462b      	mov	r3, r5
 80044e4:	4620      	mov	r0, r4
 80044e6:	4629      	mov	r1, r5
 80044e8:	f7fc f83e 	bl	8000568 <__aeabi_dmul>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4630      	mov	r0, r6
 80044f2:	4639      	mov	r1, r7
 80044f4:	f7fc f838 	bl	8000568 <__aeabi_dmul>
 80044f8:	4642      	mov	r2, r8
 80044fa:	4604      	mov	r4, r0
 80044fc:	460d      	mov	r5, r1
 80044fe:	464b      	mov	r3, r9
 8004500:	ec51 0b18 	vmov	r0, r1, d8
 8004504:	f7fb fe7a 	bl	80001fc <__adddf3>
 8004508:	ec53 2b19 	vmov	r2, r3, d9
 800450c:	f7fc f82c 	bl	8000568 <__aeabi_dmul>
 8004510:	4622      	mov	r2, r4
 8004512:	462b      	mov	r3, r5
 8004514:	f7fb fe72 	bl	80001fc <__adddf3>
 8004518:	4642      	mov	r2, r8
 800451a:	4682      	mov	sl, r0
 800451c:	468b      	mov	fp, r1
 800451e:	464b      	mov	r3, r9
 8004520:	4640      	mov	r0, r8
 8004522:	4649      	mov	r1, r9
 8004524:	f7fc f820 	bl	8000568 <__aeabi_dmul>
 8004528:	4b6b      	ldr	r3, [pc, #428]	; (80046d8 <__ieee754_pow+0x770>)
 800452a:	2200      	movs	r2, #0
 800452c:	4606      	mov	r6, r0
 800452e:	460f      	mov	r7, r1
 8004530:	f7fb fe64 	bl	80001fc <__adddf3>
 8004534:	4652      	mov	r2, sl
 8004536:	465b      	mov	r3, fp
 8004538:	f7fb fe60 	bl	80001fc <__adddf3>
 800453c:	2000      	movs	r0, #0
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4640      	mov	r0, r8
 8004548:	4649      	mov	r1, r9
 800454a:	f7fc f80d 	bl	8000568 <__aeabi_dmul>
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <__ieee754_pow+0x770>)
 8004550:	4680      	mov	r8, r0
 8004552:	4689      	mov	r9, r1
 8004554:	2200      	movs	r2, #0
 8004556:	4620      	mov	r0, r4
 8004558:	4629      	mov	r1, r5
 800455a:	f7fb fe4d 	bl	80001f8 <__aeabi_dsub>
 800455e:	4632      	mov	r2, r6
 8004560:	463b      	mov	r3, r7
 8004562:	f7fb fe49 	bl	80001f8 <__aeabi_dsub>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4650      	mov	r0, sl
 800456c:	4659      	mov	r1, fp
 800456e:	f7fb fe43 	bl	80001f8 <__aeabi_dsub>
 8004572:	ec53 2b18 	vmov	r2, r3, d8
 8004576:	f7fb fff7 	bl	8000568 <__aeabi_dmul>
 800457a:	4622      	mov	r2, r4
 800457c:	4606      	mov	r6, r0
 800457e:	460f      	mov	r7, r1
 8004580:	462b      	mov	r3, r5
 8004582:	ec51 0b19 	vmov	r0, r1, d9
 8004586:	f7fb ffef 	bl	8000568 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4630      	mov	r0, r6
 8004590:	4639      	mov	r1, r7
 8004592:	f7fb fe33 	bl	80001fc <__adddf3>
 8004596:	4606      	mov	r6, r0
 8004598:	460f      	mov	r7, r1
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4640      	mov	r0, r8
 80045a0:	4649      	mov	r1, r9
 80045a2:	f7fb fe2b 	bl	80001fc <__adddf3>
 80045a6:	a33e      	add	r3, pc, #248	; (adr r3, 80046a0 <__ieee754_pow+0x738>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	2000      	movs	r0, #0
 80045ae:	4604      	mov	r4, r0
 80045b0:	460d      	mov	r5, r1
 80045b2:	f7fb ffd9 	bl	8000568 <__aeabi_dmul>
 80045b6:	4642      	mov	r2, r8
 80045b8:	ec41 0b18 	vmov	d8, r0, r1
 80045bc:	464b      	mov	r3, r9
 80045be:	4620      	mov	r0, r4
 80045c0:	4629      	mov	r1, r5
 80045c2:	f7fb fe19 	bl	80001f8 <__aeabi_dsub>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4630      	mov	r0, r6
 80045cc:	4639      	mov	r1, r7
 80045ce:	f7fb fe13 	bl	80001f8 <__aeabi_dsub>
 80045d2:	a335      	add	r3, pc, #212	; (adr r3, 80046a8 <__ieee754_pow+0x740>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fb ffc6 	bl	8000568 <__aeabi_dmul>
 80045dc:	a334      	add	r3, pc, #208	; (adr r3, 80046b0 <__ieee754_pow+0x748>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	4606      	mov	r6, r0
 80045e4:	460f      	mov	r7, r1
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fb ffbd 	bl	8000568 <__aeabi_dmul>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4630      	mov	r0, r6
 80045f4:	4639      	mov	r1, r7
 80045f6:	f7fb fe01 	bl	80001fc <__adddf3>
 80045fa:	9a07      	ldr	r2, [sp, #28]
 80045fc:	4b37      	ldr	r3, [pc, #220]	; (80046dc <__ieee754_pow+0x774>)
 80045fe:	4413      	add	r3, r2
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fb fdfa 	bl	80001fc <__adddf3>
 8004608:	4682      	mov	sl, r0
 800460a:	9805      	ldr	r0, [sp, #20]
 800460c:	468b      	mov	fp, r1
 800460e:	f7fb ff41 	bl	8000494 <__aeabi_i2d>
 8004612:	9a07      	ldr	r2, [sp, #28]
 8004614:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <__ieee754_pow+0x778>)
 8004616:	4413      	add	r3, r2
 8004618:	e9d3 8900 	ldrd	r8, r9, [r3]
 800461c:	4606      	mov	r6, r0
 800461e:	460f      	mov	r7, r1
 8004620:	4652      	mov	r2, sl
 8004622:	465b      	mov	r3, fp
 8004624:	ec51 0b18 	vmov	r0, r1, d8
 8004628:	f7fb fde8 	bl	80001fc <__adddf3>
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	f7fb fde4 	bl	80001fc <__adddf3>
 8004634:	4632      	mov	r2, r6
 8004636:	463b      	mov	r3, r7
 8004638:	f7fb fde0 	bl	80001fc <__adddf3>
 800463c:	2000      	movs	r0, #0
 800463e:	4632      	mov	r2, r6
 8004640:	463b      	mov	r3, r7
 8004642:	4604      	mov	r4, r0
 8004644:	460d      	mov	r5, r1
 8004646:	f7fb fdd7 	bl	80001f8 <__aeabi_dsub>
 800464a:	4642      	mov	r2, r8
 800464c:	464b      	mov	r3, r9
 800464e:	f7fb fdd3 	bl	80001f8 <__aeabi_dsub>
 8004652:	ec53 2b18 	vmov	r2, r3, d8
 8004656:	f7fb fdcf 	bl	80001f8 <__aeabi_dsub>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4650      	mov	r0, sl
 8004660:	4659      	mov	r1, fp
 8004662:	e610      	b.n	8004286 <__ieee754_pow+0x31e>
 8004664:	2401      	movs	r4, #1
 8004666:	e6a1      	b.n	80043ac <__ieee754_pow+0x444>
 8004668:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80046b8 <__ieee754_pow+0x750>
 800466c:	e617      	b.n	800429e <__ieee754_pow+0x336>
 800466e:	bf00      	nop
 8004670:	4a454eef 	.word	0x4a454eef
 8004674:	3fca7e28 	.word	0x3fca7e28
 8004678:	93c9db65 	.word	0x93c9db65
 800467c:	3fcd864a 	.word	0x3fcd864a
 8004680:	a91d4101 	.word	0xa91d4101
 8004684:	3fd17460 	.word	0x3fd17460
 8004688:	518f264d 	.word	0x518f264d
 800468c:	3fd55555 	.word	0x3fd55555
 8004690:	db6fabff 	.word	0xdb6fabff
 8004694:	3fdb6db6 	.word	0x3fdb6db6
 8004698:	33333303 	.word	0x33333303
 800469c:	3fe33333 	.word	0x3fe33333
 80046a0:	e0000000 	.word	0xe0000000
 80046a4:	3feec709 	.word	0x3feec709
 80046a8:	dc3a03fd 	.word	0xdc3a03fd
 80046ac:	3feec709 	.word	0x3feec709
 80046b0:	145b01f5 	.word	0x145b01f5
 80046b4:	be3e2fe0 	.word	0xbe3e2fe0
 80046b8:	00000000 	.word	0x00000000
 80046bc:	3ff00000 	.word	0x3ff00000
 80046c0:	7ff00000 	.word	0x7ff00000
 80046c4:	43400000 	.word	0x43400000
 80046c8:	0003988e 	.word	0x0003988e
 80046cc:	000bb679 	.word	0x000bb679
 80046d0:	08004d38 	.word	0x08004d38
 80046d4:	3ff00000 	.word	0x3ff00000
 80046d8:	40080000 	.word	0x40080000
 80046dc:	08004d58 	.word	0x08004d58
 80046e0:	08004d48 	.word	0x08004d48
 80046e4:	a3b3      	add	r3, pc, #716	; (adr r3, 80049b4 <__ieee754_pow+0xa4c>)
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fb fd85 	bl	80001fc <__adddf3>
 80046f2:	4622      	mov	r2, r4
 80046f4:	ec41 0b1a 	vmov	d10, r0, r1
 80046f8:	462b      	mov	r3, r5
 80046fa:	4630      	mov	r0, r6
 80046fc:	4639      	mov	r1, r7
 80046fe:	f7fb fd7b 	bl	80001f8 <__aeabi_dsub>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	ec51 0b1a 	vmov	r0, r1, d10
 800470a:	f7fc f9bd 	bl	8000a88 <__aeabi_dcmpgt>
 800470e:	2800      	cmp	r0, #0
 8004710:	f47f ae04 	bne.w	800431c <__ieee754_pow+0x3b4>
 8004714:	4aa2      	ldr	r2, [pc, #648]	; (80049a0 <__ieee754_pow+0xa38>)
 8004716:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800471a:	4293      	cmp	r3, r2
 800471c:	f340 8107 	ble.w	800492e <__ieee754_pow+0x9c6>
 8004720:	151b      	asrs	r3, r3, #20
 8004722:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004726:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800472a:	fa4a fa03 	asr.w	sl, sl, r3
 800472e:	44da      	add	sl, fp
 8004730:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004734:	489b      	ldr	r0, [pc, #620]	; (80049a4 <__ieee754_pow+0xa3c>)
 8004736:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800473a:	4108      	asrs	r0, r1
 800473c:	ea00 030a 	and.w	r3, r0, sl
 8004740:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004744:	f1c1 0114 	rsb	r1, r1, #20
 8004748:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800474c:	fa4a fa01 	asr.w	sl, sl, r1
 8004750:	f1bb 0f00 	cmp.w	fp, #0
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	4620      	mov	r0, r4
 800475a:	4629      	mov	r1, r5
 800475c:	bfb8      	it	lt
 800475e:	f1ca 0a00 	rsblt	sl, sl, #0
 8004762:	f7fb fd49 	bl	80001f8 <__aeabi_dsub>
 8004766:	ec41 0b19 	vmov	d9, r0, r1
 800476a:	4642      	mov	r2, r8
 800476c:	464b      	mov	r3, r9
 800476e:	ec51 0b19 	vmov	r0, r1, d9
 8004772:	f7fb fd43 	bl	80001fc <__adddf3>
 8004776:	a37a      	add	r3, pc, #488	; (adr r3, 8004960 <__ieee754_pow+0x9f8>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	2000      	movs	r0, #0
 800477e:	4604      	mov	r4, r0
 8004780:	460d      	mov	r5, r1
 8004782:	f7fb fef1 	bl	8000568 <__aeabi_dmul>
 8004786:	ec53 2b19 	vmov	r2, r3, d9
 800478a:	4606      	mov	r6, r0
 800478c:	460f      	mov	r7, r1
 800478e:	4620      	mov	r0, r4
 8004790:	4629      	mov	r1, r5
 8004792:	f7fb fd31 	bl	80001f8 <__aeabi_dsub>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4640      	mov	r0, r8
 800479c:	4649      	mov	r1, r9
 800479e:	f7fb fd2b 	bl	80001f8 <__aeabi_dsub>
 80047a2:	a371      	add	r3, pc, #452	; (adr r3, 8004968 <__ieee754_pow+0xa00>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f7fb fede 	bl	8000568 <__aeabi_dmul>
 80047ac:	a370      	add	r3, pc, #448	; (adr r3, 8004970 <__ieee754_pow+0xa08>)
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	4680      	mov	r8, r0
 80047b4:	4689      	mov	r9, r1
 80047b6:	4620      	mov	r0, r4
 80047b8:	4629      	mov	r1, r5
 80047ba:	f7fb fed5 	bl	8000568 <__aeabi_dmul>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4640      	mov	r0, r8
 80047c4:	4649      	mov	r1, r9
 80047c6:	f7fb fd19 	bl	80001fc <__adddf3>
 80047ca:	4604      	mov	r4, r0
 80047cc:	460d      	mov	r5, r1
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4630      	mov	r0, r6
 80047d4:	4639      	mov	r1, r7
 80047d6:	f7fb fd11 	bl	80001fc <__adddf3>
 80047da:	4632      	mov	r2, r6
 80047dc:	463b      	mov	r3, r7
 80047de:	4680      	mov	r8, r0
 80047e0:	4689      	mov	r9, r1
 80047e2:	f7fb fd09 	bl	80001f8 <__aeabi_dsub>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4620      	mov	r0, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	f7fb fd03 	bl	80001f8 <__aeabi_dsub>
 80047f2:	4642      	mov	r2, r8
 80047f4:	4606      	mov	r6, r0
 80047f6:	460f      	mov	r7, r1
 80047f8:	464b      	mov	r3, r9
 80047fa:	4640      	mov	r0, r8
 80047fc:	4649      	mov	r1, r9
 80047fe:	f7fb feb3 	bl	8000568 <__aeabi_dmul>
 8004802:	a35d      	add	r3, pc, #372	; (adr r3, 8004978 <__ieee754_pow+0xa10>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	4604      	mov	r4, r0
 800480a:	460d      	mov	r5, r1
 800480c:	f7fb feac 	bl	8000568 <__aeabi_dmul>
 8004810:	a35b      	add	r3, pc, #364	; (adr r3, 8004980 <__ieee754_pow+0xa18>)
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	f7fb fcef 	bl	80001f8 <__aeabi_dsub>
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	f7fb fea3 	bl	8000568 <__aeabi_dmul>
 8004822:	a359      	add	r3, pc, #356	; (adr r3, 8004988 <__ieee754_pow+0xa20>)
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fb fce8 	bl	80001fc <__adddf3>
 800482c:	4622      	mov	r2, r4
 800482e:	462b      	mov	r3, r5
 8004830:	f7fb fe9a 	bl	8000568 <__aeabi_dmul>
 8004834:	a356      	add	r3, pc, #344	; (adr r3, 8004990 <__ieee754_pow+0xa28>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fcdd 	bl	80001f8 <__aeabi_dsub>
 800483e:	4622      	mov	r2, r4
 8004840:	462b      	mov	r3, r5
 8004842:	f7fb fe91 	bl	8000568 <__aeabi_dmul>
 8004846:	a354      	add	r3, pc, #336	; (adr r3, 8004998 <__ieee754_pow+0xa30>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fb fcd6 	bl	80001fc <__adddf3>
 8004850:	4622      	mov	r2, r4
 8004852:	462b      	mov	r3, r5
 8004854:	f7fb fe88 	bl	8000568 <__aeabi_dmul>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4640      	mov	r0, r8
 800485e:	4649      	mov	r1, r9
 8004860:	f7fb fcca 	bl	80001f8 <__aeabi_dsub>
 8004864:	4604      	mov	r4, r0
 8004866:	460d      	mov	r5, r1
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4640      	mov	r0, r8
 800486e:	4649      	mov	r1, r9
 8004870:	f7fb fe7a 	bl	8000568 <__aeabi_dmul>
 8004874:	2200      	movs	r2, #0
 8004876:	ec41 0b19 	vmov	d9, r0, r1
 800487a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800487e:	4620      	mov	r0, r4
 8004880:	4629      	mov	r1, r5
 8004882:	f7fb fcb9 	bl	80001f8 <__aeabi_dsub>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	ec51 0b19 	vmov	r0, r1, d9
 800488e:	f7fb ff95 	bl	80007bc <__aeabi_ddiv>
 8004892:	4632      	mov	r2, r6
 8004894:	4604      	mov	r4, r0
 8004896:	460d      	mov	r5, r1
 8004898:	463b      	mov	r3, r7
 800489a:	4640      	mov	r0, r8
 800489c:	4649      	mov	r1, r9
 800489e:	f7fb fe63 	bl	8000568 <__aeabi_dmul>
 80048a2:	4632      	mov	r2, r6
 80048a4:	463b      	mov	r3, r7
 80048a6:	f7fb fca9 	bl	80001fc <__adddf3>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4620      	mov	r0, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	f7fb fca1 	bl	80001f8 <__aeabi_dsub>
 80048b6:	4642      	mov	r2, r8
 80048b8:	464b      	mov	r3, r9
 80048ba:	f7fb fc9d 	bl	80001f8 <__aeabi_dsub>
 80048be:	460b      	mov	r3, r1
 80048c0:	4602      	mov	r2, r0
 80048c2:	4939      	ldr	r1, [pc, #228]	; (80049a8 <__ieee754_pow+0xa40>)
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7fb fc97 	bl	80001f8 <__aeabi_dsub>
 80048ca:	ec41 0b10 	vmov	d0, r0, r1
 80048ce:	ee10 3a90 	vmov	r3, s1
 80048d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048da:	da2b      	bge.n	8004934 <__ieee754_pow+0x9cc>
 80048dc:	4650      	mov	r0, sl
 80048de:	f000 f877 	bl	80049d0 <scalbn>
 80048e2:	ec51 0b10 	vmov	r0, r1, d0
 80048e6:	ec53 2b18 	vmov	r2, r3, d8
 80048ea:	f7ff bbee 	b.w	80040ca <__ieee754_pow+0x162>
 80048ee:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <__ieee754_pow+0xa44>)
 80048f0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80048f4:	429e      	cmp	r6, r3
 80048f6:	f77f af0d 	ble.w	8004714 <__ieee754_pow+0x7ac>
 80048fa:	4b2d      	ldr	r3, [pc, #180]	; (80049b0 <__ieee754_pow+0xa48>)
 80048fc:	440b      	add	r3, r1
 80048fe:	4303      	orrs	r3, r0
 8004900:	d009      	beq.n	8004916 <__ieee754_pow+0x9ae>
 8004902:	ec51 0b18 	vmov	r0, r1, d8
 8004906:	2200      	movs	r2, #0
 8004908:	2300      	movs	r3, #0
 800490a:	f7fc f89f 	bl	8000a4c <__aeabi_dcmplt>
 800490e:	3800      	subs	r0, #0
 8004910:	bf18      	it	ne
 8004912:	2001      	movne	r0, #1
 8004914:	e448      	b.n	80041a8 <__ieee754_pow+0x240>
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	f7fb fc6d 	bl	80001f8 <__aeabi_dsub>
 800491e:	4642      	mov	r2, r8
 8004920:	464b      	mov	r3, r9
 8004922:	f7fc f8a7 	bl	8000a74 <__aeabi_dcmpge>
 8004926:	2800      	cmp	r0, #0
 8004928:	f43f aef4 	beq.w	8004714 <__ieee754_pow+0x7ac>
 800492c:	e7e9      	b.n	8004902 <__ieee754_pow+0x99a>
 800492e:	f04f 0a00 	mov.w	sl, #0
 8004932:	e71a      	b.n	800476a <__ieee754_pow+0x802>
 8004934:	ec51 0b10 	vmov	r0, r1, d0
 8004938:	4619      	mov	r1, r3
 800493a:	e7d4      	b.n	80048e6 <__ieee754_pow+0x97e>
 800493c:	491a      	ldr	r1, [pc, #104]	; (80049a8 <__ieee754_pow+0xa40>)
 800493e:	2000      	movs	r0, #0
 8004940:	f7ff bb31 	b.w	8003fa6 <__ieee754_pow+0x3e>
 8004944:	2000      	movs	r0, #0
 8004946:	2100      	movs	r1, #0
 8004948:	f7ff bb2d 	b.w	8003fa6 <__ieee754_pow+0x3e>
 800494c:	4630      	mov	r0, r6
 800494e:	4639      	mov	r1, r7
 8004950:	f7ff bb29 	b.w	8003fa6 <__ieee754_pow+0x3e>
 8004954:	9204      	str	r2, [sp, #16]
 8004956:	f7ff bb7b 	b.w	8004050 <__ieee754_pow+0xe8>
 800495a:	2300      	movs	r3, #0
 800495c:	f7ff bb65 	b.w	800402a <__ieee754_pow+0xc2>
 8004960:	00000000 	.word	0x00000000
 8004964:	3fe62e43 	.word	0x3fe62e43
 8004968:	fefa39ef 	.word	0xfefa39ef
 800496c:	3fe62e42 	.word	0x3fe62e42
 8004970:	0ca86c39 	.word	0x0ca86c39
 8004974:	be205c61 	.word	0xbe205c61
 8004978:	72bea4d0 	.word	0x72bea4d0
 800497c:	3e663769 	.word	0x3e663769
 8004980:	c5d26bf1 	.word	0xc5d26bf1
 8004984:	3ebbbd41 	.word	0x3ebbbd41
 8004988:	af25de2c 	.word	0xaf25de2c
 800498c:	3f11566a 	.word	0x3f11566a
 8004990:	16bebd93 	.word	0x16bebd93
 8004994:	3f66c16c 	.word	0x3f66c16c
 8004998:	5555553e 	.word	0x5555553e
 800499c:	3fc55555 	.word	0x3fc55555
 80049a0:	3fe00000 	.word	0x3fe00000
 80049a4:	fff00000 	.word	0xfff00000
 80049a8:	3ff00000 	.word	0x3ff00000
 80049ac:	4090cbff 	.word	0x4090cbff
 80049b0:	3f6f3400 	.word	0x3f6f3400
 80049b4:	652b82fe 	.word	0x652b82fe
 80049b8:	3c971547 	.word	0x3c971547

080049bc <fabs>:
 80049bc:	ec51 0b10 	vmov	r0, r1, d0
 80049c0:	ee10 2a10 	vmov	r2, s0
 80049c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049c8:	ec43 2b10 	vmov	d0, r2, r3
 80049cc:	4770      	bx	lr
	...

080049d0 <scalbn>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	ec55 4b10 	vmov	r4, r5, d0
 80049d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80049da:	4606      	mov	r6, r0
 80049dc:	462b      	mov	r3, r5
 80049de:	b999      	cbnz	r1, 8004a08 <scalbn+0x38>
 80049e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80049e4:	4323      	orrs	r3, r4
 80049e6:	d03f      	beq.n	8004a68 <scalbn+0x98>
 80049e8:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <scalbn+0xf0>)
 80049ea:	4629      	mov	r1, r5
 80049ec:	ee10 0a10 	vmov	r0, s0
 80049f0:	2200      	movs	r2, #0
 80049f2:	f7fb fdb9 	bl	8000568 <__aeabi_dmul>
 80049f6:	4b33      	ldr	r3, [pc, #204]	; (8004ac4 <scalbn+0xf4>)
 80049f8:	429e      	cmp	r6, r3
 80049fa:	4604      	mov	r4, r0
 80049fc:	460d      	mov	r5, r1
 80049fe:	da10      	bge.n	8004a22 <scalbn+0x52>
 8004a00:	a327      	add	r3, pc, #156	; (adr r3, 8004aa0 <scalbn+0xd0>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	e01f      	b.n	8004a48 <scalbn+0x78>
 8004a08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004a0c:	4291      	cmp	r1, r2
 8004a0e:	d10c      	bne.n	8004a2a <scalbn+0x5a>
 8004a10:	ee10 2a10 	vmov	r2, s0
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb fbf0 	bl	80001fc <__adddf3>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	460d      	mov	r5, r1
 8004a20:	e022      	b.n	8004a68 <scalbn+0x98>
 8004a22:	460b      	mov	r3, r1
 8004a24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004a28:	3936      	subs	r1, #54	; 0x36
 8004a2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004a2e:	4296      	cmp	r6, r2
 8004a30:	dd0d      	ble.n	8004a4e <scalbn+0x7e>
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	a11c      	add	r1, pc, #112	; (adr r1, 8004aa8 <scalbn+0xd8>)
 8004a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a3a:	da02      	bge.n	8004a42 <scalbn+0x72>
 8004a3c:	a11c      	add	r1, pc, #112	; (adr r1, 8004ab0 <scalbn+0xe0>)
 8004a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a42:	a319      	add	r3, pc, #100	; (adr r3, 8004aa8 <scalbn+0xd8>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fd8e 	bl	8000568 <__aeabi_dmul>
 8004a4c:	e7e6      	b.n	8004a1c <scalbn+0x4c>
 8004a4e:	1872      	adds	r2, r6, r1
 8004a50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004a54:	428a      	cmp	r2, r1
 8004a56:	dcec      	bgt.n	8004a32 <scalbn+0x62>
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	dd08      	ble.n	8004a6e <scalbn+0x9e>
 8004a5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a68:	ec45 4b10 	vmov	d0, r4, r5
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004a72:	da08      	bge.n	8004a86 <scalbn+0xb6>
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	a10a      	add	r1, pc, #40	; (adr r1, 8004aa0 <scalbn+0xd0>)
 8004a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7c:	dac0      	bge.n	8004a00 <scalbn+0x30>
 8004a7e:	a10e      	add	r1, pc, #56	; (adr r1, 8004ab8 <scalbn+0xe8>)
 8004a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a84:	e7bc      	b.n	8004a00 <scalbn+0x30>
 8004a86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a8a:	3236      	adds	r2, #54	; 0x36
 8004a8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004a94:	4620      	mov	r0, r4
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <scalbn+0xf8>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	e7d5      	b.n	8004a48 <scalbn+0x78>
 8004a9c:	f3af 8000 	nop.w
 8004aa0:	c2f8f359 	.word	0xc2f8f359
 8004aa4:	01a56e1f 	.word	0x01a56e1f
 8004aa8:	8800759c 	.word	0x8800759c
 8004aac:	7e37e43c 	.word	0x7e37e43c
 8004ab0:	8800759c 	.word	0x8800759c
 8004ab4:	fe37e43c 	.word	0xfe37e43c
 8004ab8:	c2f8f359 	.word	0xc2f8f359
 8004abc:	81a56e1f 	.word	0x81a56e1f
 8004ac0:	43500000 	.word	0x43500000
 8004ac4:	ffff3cb0 	.word	0xffff3cb0
 8004ac8:	3c900000 	.word	0x3c900000

08004acc <with_errno>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	4616      	mov	r6, r2
 8004ad4:	f7ff f9a0 	bl	8003e18 <__errno>
 8004ad8:	4629      	mov	r1, r5
 8004ada:	6006      	str	r6, [r0, #0]
 8004adc:	4620      	mov	r0, r4
 8004ade:	bd70      	pop	{r4, r5, r6, pc}

08004ae0 <xflow>:
 8004ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ae2:	4614      	mov	r4, r2
 8004ae4:	461d      	mov	r5, r3
 8004ae6:	b108      	cbz	r0, 8004aec <xflow+0xc>
 8004ae8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004aec:	e9cd 2300 	strd	r2, r3, [sp]
 8004af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004af4:	4620      	mov	r0, r4
 8004af6:	4629      	mov	r1, r5
 8004af8:	f7fb fd36 	bl	8000568 <__aeabi_dmul>
 8004afc:	2222      	movs	r2, #34	; 0x22
 8004afe:	b003      	add	sp, #12
 8004b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b04:	f7ff bfe2 	b.w	8004acc <with_errno>

08004b08 <__math_uflow>:
 8004b08:	b508      	push	{r3, lr}
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b10:	f7ff ffe6 	bl	8004ae0 <xflow>
 8004b14:	ec41 0b10 	vmov	d0, r0, r1
 8004b18:	bd08      	pop	{r3, pc}

08004b1a <__math_oflow>:
 8004b1a:	b508      	push	{r3, lr}
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004b22:	f7ff ffdd 	bl	8004ae0 <xflow>
 8004b26:	ec41 0b10 	vmov	d0, r0, r1
 8004b2a:	bd08      	pop	{r3, pc}

08004b2c <__ieee754_sqrt>:
 8004b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	ec55 4b10 	vmov	r4, r5, d0
 8004b34:	4e67      	ldr	r6, [pc, #412]	; (8004cd4 <__ieee754_sqrt+0x1a8>)
 8004b36:	43ae      	bics	r6, r5
 8004b38:	ee10 0a10 	vmov	r0, s0
 8004b3c:	ee10 2a10 	vmov	r2, s0
 8004b40:	4629      	mov	r1, r5
 8004b42:	462b      	mov	r3, r5
 8004b44:	d10d      	bne.n	8004b62 <__ieee754_sqrt+0x36>
 8004b46:	f7fb fd0f 	bl	8000568 <__aeabi_dmul>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb fb53 	bl	80001fc <__adddf3>
 8004b56:	4604      	mov	r4, r0
 8004b58:	460d      	mov	r5, r1
 8004b5a:	ec45 4b10 	vmov	d0, r4, r5
 8004b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b62:	2d00      	cmp	r5, #0
 8004b64:	dc0b      	bgt.n	8004b7e <__ieee754_sqrt+0x52>
 8004b66:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004b6a:	4326      	orrs	r6, r4
 8004b6c:	d0f5      	beq.n	8004b5a <__ieee754_sqrt+0x2e>
 8004b6e:	b135      	cbz	r5, 8004b7e <__ieee754_sqrt+0x52>
 8004b70:	f7fb fb42 	bl	80001f8 <__aeabi_dsub>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	f7fb fe20 	bl	80007bc <__aeabi_ddiv>
 8004b7c:	e7eb      	b.n	8004b56 <__ieee754_sqrt+0x2a>
 8004b7e:	1509      	asrs	r1, r1, #20
 8004b80:	f000 808d 	beq.w	8004c9e <__ieee754_sqrt+0x172>
 8004b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b88:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b90:	07c9      	lsls	r1, r1, #31
 8004b92:	bf5c      	itt	pl
 8004b94:	005b      	lslpl	r3, r3, #1
 8004b96:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004b9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b9e:	bf58      	it	pl
 8004ba0:	0052      	lslpl	r2, r2, #1
 8004ba2:	2500      	movs	r5, #0
 8004ba4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004ba8:	1076      	asrs	r6, r6, #1
 8004baa:	0052      	lsls	r2, r2, #1
 8004bac:	f04f 0e16 	mov.w	lr, #22
 8004bb0:	46ac      	mov	ip, r5
 8004bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bb6:	eb0c 0001 	add.w	r0, ip, r1
 8004bba:	4298      	cmp	r0, r3
 8004bbc:	bfde      	ittt	le
 8004bbe:	1a1b      	suble	r3, r3, r0
 8004bc0:	eb00 0c01 	addle.w	ip, r0, r1
 8004bc4:	186d      	addle	r5, r5, r1
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f1be 0e01 	subs.w	lr, lr, #1
 8004bcc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004bd0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004bd4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004bd8:	d1ed      	bne.n	8004bb6 <__ieee754_sqrt+0x8a>
 8004bda:	4674      	mov	r4, lr
 8004bdc:	2720      	movs	r7, #32
 8004bde:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004be2:	4563      	cmp	r3, ip
 8004be4:	eb01 000e 	add.w	r0, r1, lr
 8004be8:	dc02      	bgt.n	8004bf0 <__ieee754_sqrt+0xc4>
 8004bea:	d113      	bne.n	8004c14 <__ieee754_sqrt+0xe8>
 8004bec:	4290      	cmp	r0, r2
 8004bee:	d811      	bhi.n	8004c14 <__ieee754_sqrt+0xe8>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	eb00 0e01 	add.w	lr, r0, r1
 8004bf6:	da57      	bge.n	8004ca8 <__ieee754_sqrt+0x17c>
 8004bf8:	f1be 0f00 	cmp.w	lr, #0
 8004bfc:	db54      	blt.n	8004ca8 <__ieee754_sqrt+0x17c>
 8004bfe:	f10c 0801 	add.w	r8, ip, #1
 8004c02:	eba3 030c 	sub.w	r3, r3, ip
 8004c06:	4290      	cmp	r0, r2
 8004c08:	bf88      	it	hi
 8004c0a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8004c0e:	1a12      	subs	r2, r2, r0
 8004c10:	440c      	add	r4, r1
 8004c12:	46c4      	mov	ip, r8
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	3f01      	subs	r7, #1
 8004c18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004c1c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004c20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004c24:	d1dd      	bne.n	8004be2 <__ieee754_sqrt+0xb6>
 8004c26:	4313      	orrs	r3, r2
 8004c28:	d01b      	beq.n	8004c62 <__ieee754_sqrt+0x136>
 8004c2a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004cd8 <__ieee754_sqrt+0x1ac>
 8004c2e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004cdc <__ieee754_sqrt+0x1b0>
 8004c32:	e9da 0100 	ldrd	r0, r1, [sl]
 8004c36:	e9db 2300 	ldrd	r2, r3, [fp]
 8004c3a:	f7fb fadd 	bl	80001f8 <__aeabi_dsub>
 8004c3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4640      	mov	r0, r8
 8004c48:	4649      	mov	r1, r9
 8004c4a:	f7fb ff09 	bl	8000a60 <__aeabi_dcmple>
 8004c4e:	b140      	cbz	r0, 8004c62 <__ieee754_sqrt+0x136>
 8004c50:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004c54:	e9da 0100 	ldrd	r0, r1, [sl]
 8004c58:	e9db 2300 	ldrd	r2, r3, [fp]
 8004c5c:	d126      	bne.n	8004cac <__ieee754_sqrt+0x180>
 8004c5e:	3501      	adds	r5, #1
 8004c60:	463c      	mov	r4, r7
 8004c62:	106a      	asrs	r2, r5, #1
 8004c64:	0863      	lsrs	r3, r4, #1
 8004c66:	07e9      	lsls	r1, r5, #31
 8004c68:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004c6c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004c70:	bf48      	it	mi
 8004c72:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004c76:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004c7a:	461c      	mov	r4, r3
 8004c7c:	e76d      	b.n	8004b5a <__ieee754_sqrt+0x2e>
 8004c7e:	0ad3      	lsrs	r3, r2, #11
 8004c80:	3815      	subs	r0, #21
 8004c82:	0552      	lsls	r2, r2, #21
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0fa      	beq.n	8004c7e <__ieee754_sqrt+0x152>
 8004c88:	02dc      	lsls	r4, r3, #11
 8004c8a:	d50a      	bpl.n	8004ca2 <__ieee754_sqrt+0x176>
 8004c8c:	f1c1 0420 	rsb	r4, r1, #32
 8004c90:	fa22 f404 	lsr.w	r4, r2, r4
 8004c94:	1e4d      	subs	r5, r1, #1
 8004c96:	408a      	lsls	r2, r1
 8004c98:	4323      	orrs	r3, r4
 8004c9a:	1b41      	subs	r1, r0, r5
 8004c9c:	e772      	b.n	8004b84 <__ieee754_sqrt+0x58>
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	e7f0      	b.n	8004c84 <__ieee754_sqrt+0x158>
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	3101      	adds	r1, #1
 8004ca6:	e7ef      	b.n	8004c88 <__ieee754_sqrt+0x15c>
 8004ca8:	46e0      	mov	r8, ip
 8004caa:	e7aa      	b.n	8004c02 <__ieee754_sqrt+0xd6>
 8004cac:	f7fb faa6 	bl	80001fc <__adddf3>
 8004cb0:	e9da 8900 	ldrd	r8, r9, [sl]
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4640      	mov	r0, r8
 8004cba:	4649      	mov	r1, r9
 8004cbc:	f7fb fec6 	bl	8000a4c <__aeabi_dcmplt>
 8004cc0:	b120      	cbz	r0, 8004ccc <__ieee754_sqrt+0x1a0>
 8004cc2:	1ca0      	adds	r0, r4, #2
 8004cc4:	bf08      	it	eq
 8004cc6:	3501      	addeq	r5, #1
 8004cc8:	3402      	adds	r4, #2
 8004cca:	e7ca      	b.n	8004c62 <__ieee754_sqrt+0x136>
 8004ccc:	3401      	adds	r4, #1
 8004cce:	f024 0401 	bic.w	r4, r4, #1
 8004cd2:	e7c6      	b.n	8004c62 <__ieee754_sqrt+0x136>
 8004cd4:	7ff00000 	.word	0x7ff00000
 8004cd8:	20000070 	.word	0x20000070
 8004cdc:	20000078 	.word	0x20000078

08004ce0 <_init>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr

08004cec <_fini>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr
